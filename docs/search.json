[{"path":"https://favstats.github.io/dashboardr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 dashboardr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Welcome guide use create_heatmap function part dashboardr package. guide demonstrates use function generate interactive heatmaps. demonstration, use gss_2020 dataset gssr package walk use function. create_heatmap function designed simplify creation highly customizable heatmaps raw aggregated data. Heatmaps excellent visualizing relationship two categorical variables continuous outcome, using color intensity represent values. function designed aid communication science researchers, social science researchers, visualize data formats common line work, namely, survey data. handles common data preparation steps : Converting haven_labelled columns (e.g., SPSS imports) R factors. Mapping raw values descriptive labels. Ordering categorical levels. Explicitly including excluding NA values distinct categories. Aggregating value_var multiple observations exist given (x, y) cell. Setting titles, labels, tooltips, color scales. vignette demonstrates use create_heatmap() function General Social Survey (GSS) Panel 2020 dataset. GSS Panel 2020 dataset follows respondents across three waves (2016, 2018, 2020), providing rich longitudinal data understanding social attitudes demographic patterns.","code":""},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"First, let’s load necessary libraries gss_2020 dataset.","code":"library(gssr) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(dplyr) library(highcharter) library(tidyr) library(dashboardr)  # Load GSS Panel 2020 data data(gss_panel20)"},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"data analysis, first step examine data (namely, variables) ’re working . idea data looks like, need prepare data creating meaningful categorical variables. keep straightforward, ’re going work first wave data, demarcated ‘_1a’ suffix. Let’s now:","code":"# Check available _1a variables wave_1a_vars <- names(gss_panel20)[grepl(\"_1a$\", names(gss_panel20))] cat(\"Available _1a variables:\\n\") #> Available _1a variables: print(wave_1a_vars[1:20])  # Show first 20 #>  [1] \"wtssall_1a\" \"wtssnr_1a\"  \"vstrat_1a\"  \"vpsu_1a\"    \"year_1a\"    #>  [6] \"id_1a\"      \"mar1_1a\"    \"mar2_1a\"    \"mar3_1a\"    \"mar4_1a\"    #> [11] \"mar5_1a\"    \"mar6_1a\"    \"mar7_1a\"    \"mar8_1a\"    \"mar9_1a\"    #> [16] \"mar10_1a\"   \"mar11_1a\"   \"mar12_1a\"   \"mar13_1a\"   \"mar14_1a\"  # Create a working dataset with key _1a variables gss_clean <- gss_panel20 %>%   # Select relevant variables from wave 1a (2016)   select(     # Demographics     age_1a, sex_1a, race_1a, degree_1a, region_1a,     # Attitudes     happy_1a, trust_1a, fair_1a, helpful_1a,     # Economic     income_1a, class_1a,     # Political     polviews_1a, partyid_1a   ) %>%   # Remove rows where all key variables are missing   filter(!is.na(age_1a) | !is.na(sex_1a) | !is.na(race_1a)) %>%   # Create age groups   mutate(     age_group = case_when(       age_1a >= 18 & age_1a <= 29 ~ \"18-29\",       age_1a >= 30 & age_1a <= 44 ~ \"30-44\",        age_1a >= 45 & age_1a <= 59 ~ \"45-59\",       age_1a >= 60 & age_1a <= 74 ~ \"60-74\",       age_1a >= 75 ~ \"75+\",       TRUE ~ NA_character_     ),     # Create income groups     income_group = case_when(       as.numeric(income_1a) <= 3 ~ \"Low\",       as.numeric(income_1a) <= 6 ~ \"Middle-Low\",       as.numeric(income_1a) <= 9 ~ \"Middle\",       as.numeric(income_1a) <= 12 ~ \"Middle-High\",        as.numeric(income_1a) > 12 ~ \"High\",       TRUE ~ NA_character_     )   )  # Check our created variables table(gss_clean$age_group, useNA = \"always\") #>  #> 18-29 30-44 45-59 60-74   75+  <NA>  #>   481   737   780   598   261    10 table(gss_clean$income_group, useNA = \"always\") #>  #>         Low      Middle Middle-High  Middle-Low        <NA>  #>         100         229        2055          49         434"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"example-1-average-age-by-education-and-gender","dir":"Articles","previous_headings":"Basic Heatmap Examples","what":"Example 1: Average Age by Education and Gender","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Let’s create heatmap showing average age across education levels gender.","code":"## TODO: some labels are off here also include the average age as text within the heatmap? # Prepare data for heatmap age_education_data <- gss_clean %>%   filter(!is.na(degree_1a), !is.na(sex_1a), !is.na(age_1a)) %>%   group_by(degree_1a, sex_1a) %>%   summarise(avg_age = mean(age_1a, na.rm = TRUE), .groups = 'drop')  # Create basic heatmap plot1 <- create_heatmap(   data = age_education_data,   x_var = \"degree_1a\",   y_var = \"sex_1a\",    value_var = \"avg_age\",   title = \"Average Age by Education Level and Gender\",   subtitle = \"GSS Panel 2016 Wave\",   x_label = \"Education Level\",   y_label = \"Gender\",   value_label = \"Average Age\",   color_palette = c(\"#ffffff\", \"#2E86AB\") )  plot1"},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"example-2-income-distribution-with-custom-ordering","dir":"Articles","previous_headings":"Basic Heatmap Examples","what":"Example 2: Income Distribution with Custom Ordering","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Let’s examine relationship age groups education, showing average income.","code":"## TODO: some labels are off here also include the average age as text within the heatmap?  # Prepare income data income_data <- gss_clean %>%   filter(!is.na(age_group), !is.na(degree_1a), !is.na(income_1a)) %>%   group_by(age_group, degree_1a) %>%   summarise(avg_income = mean(as.numeric(income_1a), na.rm = TRUE), .groups = 'drop')  # Define custom orders age_order <- c(\"18-29\", \"30-44\", \"45-59\", \"60-74\", \"75+\") education_order <- c(\"Lt High School\", \"High School\", \"Junior College\", \"Bachelor\", \"Graduate\")  # Create heatmap with custom ordering plot2 <- create_heatmap(   data = income_data,   x_var = \"age_group\",   y_var = \"degree_1a\",   value_var = \"avg_income\",   title = \"Average Income by Age Group and Education\",   subtitle = \"Higher values indicate higher income categories (2016)\",   x_label = \"Age Group\",   y_label = \"Education Level\",    value_label = \"Income Level\",   x_order = age_order,   y_order = education_order,   color_palette = c(\"#fff7ec\", \"#fee8c8\", \"#fdd49e\", \"#fdbb84\", \"#fc8d59\", \"#ef6548\", \"#d7301f\"),   tooltip_prefix = \"Income Level: \",   x_tooltip_suffix = \" years old\",   data_labels_format = \"{point.value:.1f}\" )  plot2"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"example-3-including-missing-values","dir":"Articles","previous_headings":"Advanced Heatmap Features","what":"Example 3: Including Missing Values","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Let’s create heatmap explicitly shows missing data patterns.","code":"## TODO: some labels are off here also include the average age as text within the heatmap?  # Create data with some missing values for demonstration happiness_data <- gss_clean %>%   # Keep some NAs to demonstrate include_na feature   group_by(race_1a, class_1a) %>%   summarise(     avg_happy = mean(as.numeric(happy_1a), na.rm = TRUE),     .groups = 'drop'   ) %>%   # Convert NaN to NA for demonstration   mutate(avg_happy = ifelse(is.nan(avg_happy), NA, avg_happy))  # Create heatmap including NAs plot3 <- create_heatmap(   data = happiness_data,   x_var = \"race_1a\",   y_var = \"class_1a\",   value_var = \"avg_happy\",   title = \"Average Happiness by Race and Social Class\",   subtitle = \"Including missing data patterns (2016)\",   x_label = \"Race/Ethnicity\",   y_label = \"Social Class\",   value_label = \"Happiness Level\",   include_na = TRUE,   na_label_x = \"Race Not Specified\",   na_label_y = \"Class Not Specified\",    na_color = \"#cccccc\",   color_palette = c(\"#d7191c\", \"#fdae61\", \"#ffffbf\", \"#abdda4\", \"#2b83ba\"),   tooltip_prefix = \"Happiness: \",   tooltip_suffix = \" (1-3 scale)\" )  plot3"},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"example-4-custom-value-mapping-and-aggregation","dir":"Articles","previous_headings":"Advanced Heatmap Features","what":"Example 4: Custom Value Mapping and Aggregation","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Let’s use value mapping create readable labels demonstrate different aggregation functions.","code":"## TODO: some labels are off here also include the average age as text within the heatmap?  # Prepare data with mapping political_data <- gss_clean %>%   filter(!is.na(polviews_1a), !is.na(partyid_1a), !is.na(trust_1a)) %>%   # Convert to character for mapping   mutate(     polviews_char = as.character(polviews_1a),     partyid_char = as.character(partyid_1a),     trust_numeric = as.numeric(trust_1a)   )  # Create mappings for cleaner labels polviews_map <- list(   \"Extremely Liberal\" = \"Ext Liberal\",   \"Liberal\" = \"Liberal\",   \"Slightly Liberal\" = \"Sl Liberal\",    \"Moderate\" = \"Moderate\",   \"Slightly Conservative\" = \"Sl Conservative\",   \"Conservative\" = \"Conservative\",   \"Extremely Conservative\" = \"Ext Conservative\" )  partyid_map <- list(   \"Strong Democrat\" = \"Strong Dem\",   \"Not Very Strong Democrat\" = \"Weak Dem\",   \"Independent, Close to Democrat\" = \"Lean Dem\",   \"Independent\" = \"Independent\",   \"Independent, Close to Republican\" = \"Lean Rep\",    \"Not Very Strong Republican\" = \"Weak Rep\",   \"Strong Republican\" = \"Strong Rep\" )  # Aggregate data first trust_political_data <- political_data %>%   group_by(polviews_char, partyid_char) %>%   summarise(     median_trust = median(trust_numeric, na.rm = TRUE),     .groups = 'drop'   )  # Create heatmap with mapping and median aggregation plot4 <- create_heatmap(   data = trust_political_data,   x_var = \"polviews_char\",   y_var = \"partyid_char\",   value_var = \"median_trust\",   title = \"Median Trust Levels by Political Views and Party ID\",   subtitle = \"Using median aggregation and custom label mapping (2016)\",   x_label = \"Political Views\",   y_label = \"Party Identification\",   value_label = \"Trust Level\",   x_map_values = polviews_map,   y_map_values = partyid_map,   color_palette = c(\"#ca0020\", \"#f4a582\", \"#ffffff\", \"#92c5de\", \"#0571b0\"),   color_min = 1,   color_max = 3,   tooltip_prefix = \"Median Trust: \",   tooltip_suffix = \"/3\",   data_labels_format = \"{point.value:.2f}\" )  plot4"},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"example-5-regional-analysis-with-custom-colors","dir":"Articles","previous_headings":"Advanced Heatmap Features","what":"Example 5: Regional Analysis with Custom Colors","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Let’s examine regional patterns social attitudes.","code":"# Prepare regional data regional_data <- gss_clean %>%   filter(!is.na(region_1a), !is.na(degree_1a), !is.na(fair_1a)) %>%   mutate(fair_numeric = as.numeric(fair_1a)) %>%   group_by(region_1a, degree_1a) %>%   summarise(     avg_fairness = mean(fair_numeric, na.rm = TRUE),     n_responses = n(),     .groups = 'drop'   ) %>%   # Only include cells with at least 5 responses   mutate(avg_fairness = ifelse(n_responses >= 5, avg_fairness, NA))  # Create heatmap with custom styling plot5 <- create_heatmap(   data = regional_data,   x_var = \"region_1a\",    y_var = \"degree_1a\",   value_var = \"avg_fairness\",   title = \"Perceived Fairness by Region and Education\",   subtitle = \"Cells with <5 responses shown as missing (2016)\",   x_label = \"US Region\",   y_label = \"Education Level\",   value_label = \"Fairness Rating\",   y_order = c(\"Lt High School\", \"High School\", \"Junior College\", \"Bachelor\", \"Graduate\"),   color_palette = c(\"#ffffcc\", \"#a1dab4\", \"#41b6c4\", \"#2c7fb8\", \"#253494\"),   na_color = \"#f0f0f0\",   tooltip_prefix = \"Fairness: \",   tooltip_suffix = \" (1-3 scale)\",   x_tooltip_prefix = \"Region: \",   y_tooltip_prefix = \"Education: \",   data_labels_format = \"{point.value:.2f}\" )  plot5"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"example-6-change-over-time","dir":"Articles","previous_headings":"Longitudinal Analysis","what":"Example 6: Change Over Time","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Let’s examine attitudes changed across panel waves.","code":"# Create a comparison dataset using multiple waves wave_comparison_data <- gss_panel20 %>%   select(     # Select happiness from different waves     happy_1a, happy_1b, happy_2,     # Demographics from wave 1a     age_1a, sex_1a, degree_1a   ) %>%   # Create age groups   mutate(     age_group = case_when(       age_1a >= 18 & age_1a <= 35 ~ \"18-35\",       age_1a >= 36 & age_1a <= 50 ~ \"36-50\",       age_1a >= 51 & age_1a <= 65 ~ \"51-65\",        age_1a > 65 ~ \"65+\",       TRUE ~ NA_character_     )   ) %>%   # Reshape to long format   pivot_longer(     cols = c(happy_1a, happy_1b, happy_2),     names_to = \"wave\",     values_to = \"happiness\",     names_prefix = \"happy_\"   ) %>%   # Clean wave labels   mutate(     wave = case_when(       wave == \"1a\" ~ \"2016 Wave 1\",       wave == \"1b\" ~ \"2016 Wave 2\",        wave == \"2\" ~ \"2018\",       TRUE ~ wave     )   ) %>%   # Filter out missing values   filter(!is.na(happiness), !is.na(age_group), !is.na(sex_1a)) %>%   # Aggregate by age group and wave   group_by(age_group, wave) %>%   summarise(     avg_happiness = mean(as.numeric(happiness), na.rm = TRUE),     n_cases = n(),     .groups = 'drop'   ) %>%   # Only include cells with sufficient cases   mutate(avg_happiness = ifelse(n_cases >= 10, avg_happiness, NA))  # Create cross-wave heatmap plot6 <- create_heatmap(   data = wave_comparison_data,   x_var = \"age_group\",   y_var = \"wave\",   value_var = \"avg_happiness\",    title = \"Average Happiness Across Waves by Age Group\",   subtitle = \"Comparing happiness levels across different survey waves\",   x_label = \"Age Group\",   y_label = \"Survey Wave\",   value_label = \"Happiness Level\",   x_order = c(\"18-35\", \"36-50\", \"51-65\", \"65+\"),   y_order = c(\"2016 Wave 1\", \"2016 Wave 2\", \"2018\"),   color_palette = c(\"#d7191c\", \"#fdae61\", \"#ffffbf\", \"#abdda4\", \"#2b83ba\"),   color_min = 1,   color_max = 3,   tooltip_prefix = \"Happiness: \",   tooltip_suffix = \" (1-3 scale)\",   data_labels_format = \"{point.value:.2f}\" )  plot6"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"key-features-demonstrated","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Key Features Demonstrated","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"Basic heatmaps continuous values mapped color intensity Custom ordering categorical variables logical presentation Missing value handling explicit NA categories custom colors Value mapping cleaner, readable labels Custom color palettes different data types emphasis Flexible aggregation using different functions (mean, median) Longitudinal analysis showing change time","code":""},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"best-practices-for-heatmaps","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Best Practices for Heatmaps","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"","code":"# 1. Always check your data structure first! glimpse(your_data) table(your_data$x_var, your_data$y_var, useNA = \"always\")  # 2. Consider your audience when choosing colors # - Use diverging palettes for data with meaningful zero/center point # - Use sequential palettes for data with natural ordering # - Ensure accessibility with colorblind-friendly palettes  # 3. Handle missing data thoughtfully # - Decide whether to include or exclude missing categories # - Use appropriate colors for missing data (often gray or transparent) # - Document missing data patterns in subtitles  # 4. Order categories logically # - Use natural ordering (e.g., age groups, education levels) # - Consider frequency-based ordering for nominal categories # - Place \"Other\" or \"Missing\" categories at the end  # 5. Customize tooltips for clarity # - Include units and context # - Use prefixes/suffixes to clarify meaning # - Format numbers appropriately for your audience"},{"path":"https://favstats.github.io/dashboardr/articles/heatmap_vignette.html","id":"conclusion","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Conclusion","title":"Creating Interactive Heatmaps with `create_heatmap`","text":"create_heatmap() function provides powerful flexible way visualize bivariate relationships survey data. leveraging rich GSS Panel 2020 dataset, ’ve demonstrated heatmaps can reveal patterns : Demographic distributions Attitude variations across groups Regional temporal patterns Missing data structures function’s extensive customization options allow publication-ready visualizations can effectively communicate complex social science findings diverse audiences.","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Welcome comprehensive guide using create_stackedbar function dashboardr package. function designed create highly customizable interactive stacked bar charts survey data, making particularly valuable communication science researchers social scientists working categorical data. Stacked bar charts excellent visualizing distribution categorical responses across different groups demographics. allow see overall patterns composition within category, making ideal displaying survey responses, demographic breakdowns, attitude distributions. create_stackedbar function handles many common data preparation tasks automatically, including: Converting haven_labelled columns (SPSS imports) R factors Mapping raw values descriptive labels Binning continuous variables meaningful categories Handling missing values explicitly implicitly Creating count-based percentage-based visualizations Customizing colors, ordering, interactive tooltips vignette demonstrates function’s capabilities using General Social Survey (GSS) Panel 2020 dataset, focusing 2016 wave (_1a variables).","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"First, let’s load necessary libraries examine dataset.","code":"library(gssr) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(dplyr) library(highcharter) library(tidyr) library(dashboardr)  # Load GSS Panel 2020 data data(gss_panel20)"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s prepare working dataset using 2020 wave variables.","code":"# Create a working dataset with key _1a variables from 2020 gss_clean <- gss_panel20 %>%   select(     # Demographics     age_1a, sex_1a, race_1a, degree_1a, region_1a,     # Attitudes and behaviors     happy_1a, trust_1a, fair_1a, helpful_1a,     polviews_1a, partyid_1a, attend_1a,     # Economic     income_1a, class_1a   ) %>%   # Remove completely empty rows   filter(if_any(everything(), ~ !is.na(.)))  # Check the data structure glimpse(gss_clean) #> Rows: 2,867 #> Columns: 14 #> $ age_1a      <dbl+lbl> 47, 61, 72, 43, 55, 53, 50, 23, 45, 71, 33, 86, 32, 60… #> $ sex_1a      <dbl+lbl> 1, 1, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, … #> $ race_1a     <dbl+lbl> 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 2, 1, 2, 2, 1, 1, 1, 3, … #> $ degree_1a   <dbl+lbl> 3, 1, 3, 1, 4, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, … #> $ region_1a   <dbl+lbl> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, … #> $ happy_1a    <dbl+lbl>     2,     2,     1,     2,     1,     1,     2,     1… #> $ trust_1a    <dbl+lbl> NA(i),     3,     1, NA(i),     1,     1, NA(i),     2… #> $ fair_1a     <dbl+lbl> NA(i),     1,     1, NA(i),     2,     2, NA(i),     1… #> $ helpful_1a  <dbl+lbl> NA(i),     2,     2, NA(i),     3,     1, NA(i),     1… #> $ polviews_1a <dbl+lbl>     4,     2,     6,     4,     3,     3,     3,     5… #> $ partyid_1a  <dbl+lbl>     3,     2,     5,     5,     1,     1,     5,     2… #> $ attend_1a   <dbl+lbl> 0, 0, 7, 6, 0, 0, 1, 5, 6, 0, 5, 3, 5, 6, 1, 8, 8, 8, … #> $ income_1a   <dbl+lbl> NA(n),    12,    12, NA(n), NA(n),    12, NA(n),    12… #> $ class_1a    <dbl+lbl>     3, NA(d),     3,     3,     3,     3,     3,     2…  # Examine some key variables table(gss_clean$degree_1a, useNA = \"always\") #>  #>    0    1    2    3    4 <NA>  #>  328 1461  216  536  318    8 table(gss_clean$happy_1a, useNA = \"always\") #>  #>    1    2    3 <NA>  #>  806 1601  452    8"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-1-education-by-gender-count-based","dir":"Articles","previous_headings":"Basic Stacked Bar Charts","what":"Example 1: Education by Gender (Count-based)","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s start basic stacked bar chart showing educational attainment gender.","code":"## TODO: there is a odd 5 chart # Create basic stacked bar chart plot1 <- create_stackedbar(   data = gss_clean,   x_var = \"degree_1a\",   stack_var = \"sex_1a\",   title = \"Educational Attainment by Gender\",   subtitle = \"GSS Panel 2016 - Raw counts\",   x_label = \"Highest Degree Completed\",   y_label = \"Number of Respondents\",   stack_label = \"Gender\",   stacked_type = \"normal\" )  plot1"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-2-happiness-distribution-percentage-based","dir":"Articles","previous_headings":"Basic Stacked Bar Charts","what":"Example 2: Happiness Distribution (Percentage-based)","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Now let’s create percentage-based stacked bar chart show happiness distribution across education levels.","code":"## TODO: there is also an odd 5 chart  # Define education order for logical display education_order <- c(\"Lt High School\", \"High School\", \"Junior College\", \"Bachelor\", \"Graduate\")  # Create percentage stacked bar chart plot2 <- create_stackedbar(   data = gss_clean,   x_var = \"degree_1a\",   stack_var = \"happy_1a\",   title = \"Happiness Distribution Across Education Levels\",   subtitle = \"Percentage breakdown within each education category\",   x_label = \"Education Level\",   y_label = \"Percentage of Respondents\",   stack_label = \"Happiness Level\",   stacked_type = \"percent\",   x_order = education_order,   stack_order = c(\"Very Happy\", \"Pretty Happy\", \"Not Too Happy\"),   tooltip_suffix = \"%\",   color_palette = c(\"#2E86AB\", \"#A23B72\", \"#F18F01\") )  plot2"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-3-age-binning-with-political-views","dir":"Articles","previous_headings":"Advanced Features","what":"Example 3: Age Binning with Political Views","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s demonstrate binning continuous variables creating age groups examining political views.","code":"# First, let's clean and prepare the age variable gss_clean_age <- gss_clean %>%   # Ensure age is numeric and remove missing values for this analysis   filter(!is.na(age_1a), !is.na(polviews_1a)) %>%   mutate(     # Convert age to numeric if it isn't already     age_numeric = as.numeric(age_1a)   )  # Check the cleaned data cat(\"Cleaned age summary:\\n\") #> Cleaned age summary: summary(gss_clean_age$age_numeric) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   34.00   50.00   49.26   62.00   89.00  # Define age breaks and labels (adjusted if needed based on actual data range) age_range <- range(gss_clean_age$age_numeric, na.rm = TRUE) cat(\"Age range in data:\", age_range[1], \"to\", age_range[2], \"\\n\") #> Age range in data: 18 to 89 # Adjust breaks to match actual data range age_breaks <- c(18, 30, 45, 60, 75, Inf) age_labels <- c(\"18-29\", \"30-44\", \"45-59\", \"60-74\", \"75+\")  # Map political views to shorter labels polviews_map <- list(   \"Extremely Liberal\" = \"Ext Liberal\",   \"Liberal\" = \"Liberal\",    \"Slightly Liberal\" = \"Sl Liberal\",   \"Moderate\" = \"Moderate\",   \"Slightly Conservative\" = \"Sl Conservative\",   \"Conservative\" = \"Conservative\",   \"Extremely Conservative\" = \"Ext Conservative\" )  # Create chart with age binning and value mapping using the numeric age plot3 <- create_stackedbar(   data = gss_clean_age,   x_var = \"age_numeric\",  # Use the numeric version   stack_var = \"polviews_1a\",   title = \"Political Views by Age Group\",   subtitle = \"Distribution of political ideology across age cohorts\",   x_label = \"Age Group\",   stack_label = \"Political Views\",   x_breaks = age_breaks,   x_bin_labels = age_labels,   stack_map_values = polviews_map,   stacked_type = \"percent\",   tooltip_suffix = \"%\",   x_tooltip_suffix = \" years\",   color_palette = c(\"#d7191c\", \"#fdae61\", \"#fee08b\", \"#e6f598\", \"#abdda4\", \"#66c2a5\", \"#2b83ba\") )  plot3"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-4-including-missing-values","dir":"Articles","previous_headings":"Advanced Features","what":"Example 4: Including Missing Values","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s create chart explicitly shows missing data patterns.","code":"## Example 4: Including Missing Values  # Let's create a chart that explicitly shows missing data patterns.  # Create chart including NA values (using default \"(Missing)\" labels) plot4 <- create_stackedbar(   data = gss_clean,   x_var = \"race_1a\",   stack_var = \"attend_1a\",   title = \"Religious Attendance by Race/Ethnicity\",   subtitle = \"Including non-responses as explicit categories\",   x_label = \"Race/Ethnicity\",   stack_label = \"Religious Attendance Frequency\",   include_na = TRUE,   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#8e0152\", \"#c51b7d\", \"#de77ae\", \"#f1b6da\", \"#fde0ef\",                     \"#e6f5d0\", \"#b8e186\", \"#7fbc41\", \"#4d9221\", \"#276419\") )  plot4"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-5-custom-value-mapping","dir":"Articles","previous_headings":"Advanced Features","what":"Example 5: Custom Value Mapping","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s demonstrate comprehensive value mapping cleaner labels.","code":"## TODO: there is also an odd 4 chart  # Create mappings for cleaner display sex_map <- list(\"Male\" = \"Men\", \"Female\" = \"Women\") class_map <- list(   \"Lower Class\" = \"Lower\",   \"Working Class\" = \"Working\",    \"Middle Class\" = \"Middle\",   \"Upper Class\" = \"Upper\" )  # Create chart with custom mappings plot5 <- create_stackedbar(   data = gss_clean,   x_var = \"class_1a\",   stack_var = \"sex_1a\",   title = \"Gender Distribution Across Social Classes\",   subtitle = \"With custom labels and ordering\",   x_label = \"Self-Reported Social Class\",   stack_label = \"Gender\",   x_map_values = class_map,   stack_map_values = sex_map,   x_order = c(\"Lower\", \"Working\", \"Middle\", \"Upper\"),   stack_order = c(\"Women\", \"Men\"),   stacked_type = \"normal\",   tooltip_prefix = \"Count: \",   color_palette = c(\"#E07A5F\", \"#3D5A80\") )  plot5"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-6-regional-patterns-in-trust","dir":"Articles","previous_headings":"Complex Analysis Examples","what":"Example 6: Regional Patterns in Trust","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s examine trust levels vary across regions social classes.","code":"## TODO: there is also an odd Series 4 chart  # Create regional trust analysis plot6 <- create_stackedbar(   data = gss_clean,   x_var = \"region_1a\",   stack_var = \"trust_1a\",   title = \"Trust Levels by US Region\",   subtitle = \"Regional variation in interpersonal trust\",   x_label = \"US Region\",   stack_label = \"Trust Level\",   stack_order = c(\"Can Trust\", \"Can't Be Too Careful\", \"Depends\"),   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#2E8B57\", \"#DAA520\", \"#CD5C5C\") )  plot6"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"example-7-multi-level-analysis-with-income-binning","dir":"Articles","previous_headings":"Complex Analysis Examples","what":"Example 7: Multi-level Analysis with Income Binning","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Let’s create income groups examine relationship happiness gender.","code":"## TODO: there is also an odd 12 chart, + the order is off?  # First, let's examine the income variable table(gss_clean$income_1a, useNA = \"always\") #>  #>    1    2    3    4    5    6    7    8    9   10   11   12 <NA>  #>   39   40   21   15   19   15   22   47  160  129  198 1728  434  # Create income groups based on the GSS income categories # Note: GSS income is typically coded as categories, not continuous income_map <- list(   \"1\" = \"Under $1,000\",   \"2\" = \"$1,000-2,999\",    \"3\" = \"$3,000-3,999\",   \"4\" = \"$4,000-4,999\",   \"5\" = \"$5,000-5,999\",   \"6\" = \"$6,000-6,999\",   \"7\" = \"$7,000-7,999\",   \"8\" = \"$8,000-9,999\",   \"9\" = \"$10,000-12,499\",   \"10\" = \"$12,500-14,999\",   \"11\" = \"$15,000-17,499\",   \"12\" = \"$17,500-19,999\",   \"13\" = \"$20,000-22,499\",   \"14\" = \"$22,500-24,999\",   \"15\" = \"$25,000-29,999\",   \"16\" = \"$30,000-34,999\",   \"17\" = \"$35,000-39,999\",   \"18\" = \"$40,000-49,999\",   \"19\" = \"$50,000-59,999\",   \"20\" = \"$60,000-74,999\",   \"21\" = \"$75,000-89,999\",   \"22\" = \"$90,000-109,999\",   \"23\" = \"$110,000-129,999\",   \"24\" = \"$130,000-149,999\",   \"25\" = \"$150,000+\" )  # Create simplified income groups income_simple_map <- list(   \"1\" = \"Low\", \"2\" = \"Low\", \"3\" = \"Low\", \"4\" = \"Low\", \"5\" = \"Low\",   \"6\" = \"Low\", \"7\" = \"Low\", \"8\" = \"Low\", \"9\" = \"Low-Mid\",   \"10\" = \"Low-Mid\", \"11\" = \"Low-Mid\", \"12\" = \"Low-Mid\", \"13\" = \"Low-Mid\",   \"14\" = \"Low-Mid\", \"15\" = \"Middle\", \"16\" = \"Middle\", \"17\" = \"Middle\",   \"18\" = \"Middle\", \"19\" = \"Mid-High\", \"20\" = \"Mid-High\", \"21\" = \"High\",   \"22\" = \"High\", \"23\" = \"High\", \"24\" = \"High\", \"25\" = \"High\" )  # Create income-happiness analysis plot7 <- create_stackedbar(   data = gss_clean,   x_var = \"income_1a\",   stack_var = \"happy_1a\",   title = \"Happiness Distribution by Income Level\",   subtitle = \"Simplified income categories\",   x_label = \"Income Level\",   stack_label = \"Happiness\",   x_map_values = income_simple_map,   x_order = c(\"Low\", \"Low-Mid\", \"Middle\", \"Mid-High\", \"High\"),   stack_order = c(\"Very Happy\", \"Pretty Happy\", \"Not Too Happy\"),   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#1f77b4\", \"#ff7f0e\", \"#d62728\"),   include_na = FALSE )  plot7"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"key-features-demonstrated","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Key Features Demonstrated","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"Basic stacked bars count percentage displays Age binning continuous variables Value mapping cleaner, descriptive labels Custom ordering logical presentation categories Missing value handling explicit NA categories Pre-aggregated data support existing summary tables Custom color palettes different data types branding Comprehensive tooltips prefixes, suffixes, formatting Flexible styling different analytical needs","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"best-practices-for-stacked-bar-charts","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Best Practices for Stacked Bar Charts","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"","code":"# 1. Choose appropriate stacking type # - Use \"normal\" for comparing absolute counts across groups # - Use \"percent\" for comparing proportions within groups  # 2. Order categories logically # - Use natural ordering for ordinal variables (e.g., Likert scales) # - Consider frequency-based ordering for nominal categories # - Place \"Other\" or \"Missing\" categories at the end  # 3. Handle missing data thoughtfully # - Decide whether to include or exclude missing categories # - Use include_na = TRUE when missing patterns are meaningful # - Provide clear labels for missing categories  # 4. Use appropriate colors # - Use diverging palettes for scales with meaningful center points # - Use qualitative palettes for nominal categories # - Ensure sufficient contrast between adjacent categories # - Consider colorblind accessibility  # 5. Customize tooltips for clarity # - Include units and context in tooltips # - Use prefixes/suffixes to clarify meaning # - Format numbers appropriately for your audience  # 6. Consider your audience # - Use descriptive labels rather than codes # - Provide clear titles and subtitles # - Include sample sizes in subtitles when relevant"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"common-use-cases","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Common Use Cases","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"create_stackedbar function particularly useful : Survey response analysis: Displaying Likert scale responses across demographics Demographic breakdowns: Showing composition groups various characteristics Attitude research: Comparing opinions across different populations Market research: Analyzing customer segments preferences Educational research: Examining outcomes across different groups Health surveys: Displaying health behaviors outcomes demographics","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbar_vignette.html","id":"conclusion","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Conclusion","title":"Creating Interactive Stacked Bar Charts with `create_stackedbar`","text":"create_stackedbar() function provides comprehensive solution creating publication-ready stacked bar charts survey data. extensive customization options, automatic data handling capabilities, interactive features make invaluable tool social science researchers. Key advantages include: Automatic data preparation common survey data formats Flexible binning mapping continuous coded variables Comprehensive missing data handling options Interactive tooltips enhanced data exploration Publication-ready styling extensive customization options Support raw pre-aggregated data","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Getting Started With `create_stackedbars()`","text":"Let’s load necessary libraries examine dataset. demonstration, using 2020 wave GSS dataset.","code":"library(gssr) ## Warning: package 'gssr' was built under R version 4.4.3 ## Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  ##   object 'type_sum.accel' not found ## Package loaded. To attach the GSS data, type data(gss_all) at the console. ## For the panel data and documentation, type e.g. data(gss_panel08_long) and data(gss_panel_doc). ## For help on a specific GSS variable, type ?varname at the console. library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(highcharter) ## Registered S3 method overwritten by 'quantmod': ##   method            from ##   as.zoo.data.frame zoo ## Highcharts (www.highcharts.com) is a Highsoft software product which is ## not free for commercial and Governmental use library(tidyr) library(dashboardr)  # Load GSS Panel 2020 data data(gss_panel20)"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Getting Started With `create_stackedbars()`","text":"Let’s identify prepare Likert-type questions 2016 wave (_1a variables) ease use practical.","code":"# Look for confidence-related questions (common Likert-type questions in GSS) confidence_vars <- names(gss_panel20)[grepl(\"^con.*_1a$\", names(gss_panel20))] cat(\"Confidence variables found:\\n\") ## Confidence variables found: print(confidence_vars) ##  [1] \"conarmy_1a\"  \"conbus_1a\"   \"conclerg_1a\" \"condom_1a\"   \"condrift_1a\" ##  [6] \"coneduc_1a\"  \"confed_1a\"   \"confinan_1a\" \"coninc_1a\"   \"conjudge_1a\" ## [11] \"conlabor_1a\" \"conlegis_1a\" \"conmedic_1a\" \"conpress_1a\" \"conrinc_1a\"  ## [16] \"consci_1a\"   \"consent_1a\"  \"contv_1a\"    \"conbiz_1a\"   \"conchurh_1a\" ## [21] \"concong_1a\"  \"concourt_1a\" \"condemnd_1a\" \"conf2f_1a\"   \"conschls_1a\" ## [26] \"conwkday_1a\" # Look for other attitude/satisfaction variables attitude_vars <- names(gss_panel20)[grepl(\"(trust|fair|helpful|happy).*_1a$\", names(gss_panel20))] cat(\"\\nAttitude variables found:\\n\") ##  ## Attitude variables found: print(attitude_vars) ##  [1] \"fair_1a\"      \"happy_1a\"     \"helpful_1a\"   \"trust_1a\"     \"befair_1a\"    ##  [6] \"cantrust_1a\"  \"fairearn_1a\"  \"spvtrfair_1a\" \"trustman_1a\"  \"trustsci_1a\"  ## [11] \"unhappy_1a\" # Create a working dataset with key Likert-type variables gss_likert <- gss_panel20 %>%   select(     # Confidence in institutions (if available)     any_of(confidence_vars),     # Individual attitudes     trust_1a, fair_1a, helpful_1a, happy_1a,     # Additional context variables     age_1a, sex_1a, degree_1a   ) %>%   # Remove completely empty rows   filter(if_any(everything(), ~ !is.na(.)))  # Examine the response patterns for key variables cat(\"Trust responses:\\n\") ## Trust responses: table(gss_likert$trust_1a, useNA = \"always\") ##  ##    1    2    3 <NA>  ##  623 1244   79  921 cat(\"\\nFair responses:\\n\") ##  ## Fair responses: table(gss_likert$fair_1a, useNA = \"always\") ##  ##    1    2    3 <NA>  ##  797 1028  114  928 cat(\"\\nHelpful responses:\\n\") ##  ## Helpful responses: table(gss_likert$helpful_1a, useNA = \"always\") ##  ##    1    2    3 <NA>  ##  917  892  137  921 cat(\"\\nHappy responses:\\n\") ##  ## Happy responses: table(gss_likert$happy_1a, useNA = \"always\") ##  ##    1    2    3 <NA>  ##  806 1601  452    8"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-1-social-trust-and-attitudes","dir":"Articles","previous_headings":"Basic Multi-Question Charts","what":"Example 1: Social Trust and Attitudes","title":"Getting Started With `create_stackedbars()`","text":"Now simplified data set, let’s create first multi-question chart using social attitude variables.","code":"# Define our questions and labels social_questions <- c(\"trust_1a\", \"fair_1a\", \"helpful_1a\") social_labels <- c(   \"Interpersonal Trust\",   \"Fairness of Others\",    \"Helpfulness of Others\" )  # Create basic multi-question chart plot1 <- create_stackedbars(   data = gss_likert,   questions = social_questions,   question_labels = social_labels,   title = \"Social Attitudes and Trust\",   subtitle = \"GSS Panel 2016 - Distribution of responses across social attitude questions\",   x_label = \"Social Attitude Dimension\",   stack_label = \"Response Level\",   stacked_type = \"normal\" ) ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). plot1"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-2-percentage-based-comparison","dir":"Articles","previous_headings":"Basic Multi-Question Charts","what":"Example 2: Percentage-Based Comparison","title":"Getting Started With `create_stackedbars()`","text":"Now let’s create percentage-based chart better compare response patterns across questions.","code":"# Create percentage-based chart with custom colors plot2 <- create_stackedbars(   data = gss_likert,   questions = social_questions,   question_labels = social_labels,   title = \"Social Attitudes - Response Distribution\",   subtitle = \"Percentage breakdown showing response patterns across questions\",   x_label = \"Social Attitude Dimension\",   stack_label = \"Response Category\",   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#d7191c\", \"#fdae61\", \"#ffffbf\", \"#abdda4\", \"#2b83ba\") ) ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). plot2"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-3-custom-response-ordering-and-mapping","dir":"Articles","previous_headings":"Advanced Customization","what":"Example 3: Custom Response Ordering and Mapping","title":"Getting Started With `create_stackedbars()`","text":"Let’s create sophisticated chart custom response ordering cleaner labels.","code":"# First, let's examine what the actual response values are cat(\"Unique trust responses:\\n\") ## Unique trust responses: print(unique(as.character(gss_likert$trust_1a))) ## [1] NA  \"3\" \"1\" \"2\" cat(\"\\nUnique fair responses:\\n\") ##  ## Unique fair responses: print(unique(as.character(gss_likert$fair_1a))) ## [1] NA  \"1\" \"2\" \"3\" #TODO: There is a \"Series 4\" I think for NA values, that needs to be dealt with, i.e. ideally that has its own value? # Create response mapping for cleaner labels response_map <- list(   \"can't trust\" = \"High Trust/Positive\", # I know this doesn't make sense, let's just pretend for the sake of the demo   \"can't be too careful\" = \"Low Trust/Negative\",    \"depends\" = \"Situational/Neutral\",   \"would try to be fair\" = \"High Trust/Positive\",   \"would take advantage of you\" = \"Low Trust/Negative\",   \"depends\" = \"Situational/Neutral\",   \"try to be helpful\" = \"High Trust/Positive\",   \"looking out for themselves\" = \"Low Trust/Negative\",   \"depends\" = \"Situational/Neutral\" )  # Define response order (from negative to positive) response_order <- c(\"Low Trust/Negative\", \"Situational/Neutral\", \"High Trust/Positive\")  # Create chart with custom mapping and ordering plot3 <- create_stackedbars(   data = gss_likert,   questions = social_questions,   question_labels = social_labels,   title = \"Social Trust Dimensions with Standardized Responses\",   subtitle = \"Responses mapped to consistent positive/negative categories\",   x_label = \"Trust Dimension\",   stack_label = \"Trust Level\",   stack_map_values = response_map,   stack_order = response_order,   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#d62728\", \"#ffbb78\", \"#2ca02c\", \"grey\") ) ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). ## Warning: stack_order provided with stack_map_values. Ensure stack_order refers ## to the *new* mapped labels. plot3"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-4-including-missing-values","dir":"Articles","previous_headings":"Advanced Customization","what":"Example 4: Including Missing Values","title":"Getting Started With `create_stackedbars()`","text":"Let’s create chart explicitly shows missing data patterns.","code":"# Create chart including NA values plot4 <- create_stackedbars(   data = gss_likert,   questions = social_questions,   question_labels = social_labels,   title = \"Social Attitudes Including Non-Responses\",   subtitle = \"Showing missing data patterns explicitly\",   x_label = \"Social Attitude Question\",   stack_label = \"Response\",   stack_map_values = response_map,   include_na = TRUE,   na_label_stack = \"No Answer/Not Asked\",   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"forestgreen\", \"darkred\", \"grey\", \"yellow\") ) ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). plot4"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-5-happiness-and-life-satisfaction","dir":"Articles","previous_headings":"Working with Different Question Types","what":"Example 5: Happiness and Life Satisfaction","title":"Getting Started With `create_stackedbars()`","text":"Let’s work happiness different type Likert scale.","code":"# Create a happiness-focused analysis happiness_questions <- c(\"happy_1a\") happiness_labels <- c(\"General Happiness\")  # Check happiness response values cat(\"Happiness responses:\\n\") ## Happiness responses: table(gss_likert$happy_1a, useNA = \"always\") ##  ##    1    2    3 <NA>  ##  806 1601  452    8 # Create happiness chart plot5 <- create_stackedbars(   data = gss_likert,   questions = \"happy_1a\",   title = \"General Happiness Distribution\",   x_label = \"Well-being Measure\",   stack_label = \"Happiness Level\",   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#2E8B57\", \"#FFD700\", \"#CD5C5C\", \"grey\") ) ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). plot5"},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-6-combining-different-question-types","dir":"Articles","previous_headings":"Working with Different Question Types","what":"Example 6: Combining Different Question Types","title":"Getting Started With `create_stackedbars()`","text":"Let’s create comprehensive chart combining different types attitude questions. general, recommend one battery per chart. , really want different responses chart, ’ll need standardize response labels charting, especially using SPSS data.","code":"#TODO: this chart I dont get it has so many different scales, I think ideally should only be used with same scale? # Standardize responses before charting gss_standardized <- gss_likert %>%   mutate(     # Convert haven_labelled to character with labels first     trust_1a_char = as.character(haven::as_factor(trust_1a, levels = \"labels\")),     fair_1a_char = as.character(haven::as_factor(fair_1a, levels = \"labels\")),     helpful_1a_char = as.character(haven::as_factor(helpful_1a, levels = \"labels\")),     happy_1a_char = as.character(haven::as_factor(happy_1a, levels = \"labels\")),          # Now do the case_when with the actual text labels     trust_1a_std = case_when(       trust_1a_char == \"Can Trust\" ~ \"Positive\",       trust_1a_char == \"Can't Be Too Careful\" ~ \"Negative\",        trust_1a_char == \"Depends\" ~ \"Neutral\",       TRUE ~ trust_1a_char     ),     fair_1a_std = case_when(       fair_1a_char == \"Most People Try to Be Fair\" ~ \"Positive\",       fair_1a_char == \"Most People Try to Take Advantage\" ~ \"Negative\",       fair_1a_char == \"Depends\" ~ \"Neutral\",  # Fixed: was trust_1a       TRUE ~ fair_1a_char     ),     helpful_1a_std = case_when(       helpful_1a_char == \"Most People Try to Be Helpful\" ~ \"Positive\",       helpful_1a_char == \"Most People Look Out for Themselves\" ~ \"Negative\",       helpful_1a_char == \"Depends\" ~ \"Neutral\",  # Fixed: was trust_1a       TRUE ~ helpful_1a_char     ),     happy_1a_std = case_when(       happy_1a_char == \"Very Happy\" ~ \"Positive\",       happy_1a_char == \"Pretty Happy\" ~ \"Neutral\",       happy_1a_char == \"Not Too Happy\" ~ \"Negative\",       TRUE ~ happy_1a_char     )   ) # Check what the actual labels are after conversion cat(\"Trust labels:\\n\") ## Trust labels: table(gss_standardized$trust_1a_char, useNA = \"always\") ##  ## can't be too careful          can't trust              depends  ##                 1244                  623                   79  ##                 <NA>  ##                  921 cat(\"\\nFair labels:\\n\") ##  ## Fair labels: table(gss_standardized$fair_1a_char, useNA = \"always\") ##  ##                     depends would take advantage of you  ##                         114                         797  ##        would try to be fair                        <NA>  ##                        1028                         928 cat(\"\\nHelpful labels:\\n\") ##  ## Helpful labels: table(gss_standardized$helpful_1a_char, useNA = \"always\") ##  ##                    depends looking out for themselves  ##                        137                        892  ##          try to be helpful                       <NA>  ##                        917                        921 cat(\"\\nHappy labels:\\n\") ##  ## Happy labels: table(gss_standardized$happy_1a_char, useNA = \"always\") ##  ## not too happy  pretty happy    very happy          <NA>  ##           452          1601           806             8 # Then use the standardized versions standardized_questions <- c(\"trust_1a_std\", \"fair_1a_std\", \"helpful_1a_std\", \"happy_1a_std\")  # Write the question labels standardized_labels <- c(   \"Can People Be Trusted?\",   \"Are People Generally Fair?\",    \"Are People Generally Helpful?\",   \"How Happy Are You?\" )  # Create comprehensive chart plot6 <- create_stackedbars(   data = gss_standardized,   questions = standardized_questions,   question_labels = standardized_labels,   title = \"Social Attitudes and Well-being Battery\",   subtitle = \"Multiple dimensions of social trust and personal happiness\",   x_label = \"Question Domain\",   stack_label = \"Response\",   stacked_type = \"percent\",   tooltip_prefix = \"Response: \",   tooltip_suffix = \"% of respondents\",   x_tooltip_suffix = \" question\" )  plot6"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-7-demographic-subgroup-analysis","dir":"Articles","previous_headings":"Advanced Analysis Techniques","what":"Example 7: Demographic Subgroup Analysis","title":"Getting Started With `create_stackedbars()`","text":"Let’s create separate charts different demographic groups.","code":"## TODO: maybe we dont need the if logic here? I think is confusing for the tutorial. # You probably noticed one of the response labels is incorrect. Let's fix that first. We can do this easily using mapping in the `create_barcharts` function. trust_fix_map <- list(   \"can't trust\" = \"can trust\"   # Add other mappings if needed )  # Next, let's examine what degree values actually exist cat(\"Degree values in data:\\n\") ## Degree values in data: table(gss_likert$degree_1a, useNA = \"always\") ##  ##    0    1    2    3    4 <NA>  ##  328 1461  216  536  318    8 # Convert degree to factor with labels to see what we're working with degree_labels <- as.character(haven::as_factor(gss_likert$degree_1a, levels = \"labels\")) cat(\"\\nDegree labels:\\n\") ##  ## Degree labels: table(degree_labels, useNA = \"always\") ## degree_labels ## associate/junior college               bachelor's                 graduate  ##                      216                      536                      318  ##              high school    less than high school                     <NA>  ##                     1461                      328                        8 # Create education groups based on actual data gss_education <- gss_likert %>%   mutate(     degree_label = as.character(haven::as_factor(degree_1a, levels = \"labels\")),     education_group = case_when(       degree_label %in% c(\"less than high school\", \"high school\") ~ \"High School or Less\",       degree_label %in% c(\"associate/junior college\", \"bachelor's\", \"graduate\") ~ \"College or More\",       TRUE ~ \"Other/Missing\"     )   ) %>%   filter(education_group != \"Other/Missing\")  # Check the groups cat(\"\\nEducation groups:\\n\") ##  ## Education groups: table(gss_education$education_group, useNA = \"always\") ##  ##     College or More High School or Less                <NA>  ##                1070                1789                   0 # Filter for college or more college_data <- gss_education %>%   filter(education_group == \"College or More\")  cat(\"\\nCollege data rows:\", nrow(college_data), \"\\n\") ##  ## College data rows: 1070 # Filter for high school or less   high_school_data <- gss_education %>%   filter(education_group == \"High School or Less\")  cat(\"High school data rows:\", nrow(high_school_data), \"\\n\") ## High school data rows: 1789 # Only create charts if we have sufficient data if (nrow(college_data) > 50) {   plot8a <- create_stackedbars(     data = college_data,     questions = social_questions,     question_labels = social_labels,     stack_map_values = trust_fix_map,     title = \"Social Attitudes Among College-Educated\",     subtitle = paste0(\"Junior college, bachelor's, and graduate degree holders (n=\", nrow(college_data), \")\"),     x_label = \"Social Attitude Dimension\",     stack_label = \"Response\",     stacked_type = \"percent\",     include_na = TRUE,     na_label_stack = \"No Answer\",     tooltip_suffix = \"%\",     color_palette = c(\"#2166ac\", \"#762a83\", \"#5aae61\", \"darkgrey\")   )      print(\"College-educated chart:\")   print(plot8a) } else {   cat(\"Not enough college-educated respondents for analysis\\n\") } ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). ## [1] \"College-educated chart:\" if (nrow(high_school_data) > 50) {   plot8b <- create_stackedbars(     data = high_school_data,     questions = social_questions,     question_labels = social_labels,     stack_map_values = trust_fix_map,     title = \"Social Attitudes Among High School Educated\",     subtitle = paste0(\"High school diploma or less (n=\", nrow(high_school_data), \")\"),     x_label = \"Social Attitude Dimension\",      stack_label = \"Response\",     stacked_type = \"percent\",     include_na = TRUE,     na_label_stack = \"No Answer\",     tooltip_suffix = \"%\",     color_palette = c(\"#2166ac\", \"#762a83\", \"#5aae61\", \"darkgrey\")   )      print(\"High school educated chart:\")   print(plot8b) } else {   cat(\"Not enough high school educated respondents for analysis\\n\") } ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). ## [1] \"High school educated chart:\""},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-9-creating-question-batteries","dir":"Articles","previous_headings":"Working with Survey Batteries","what":"Example 9: Creating Question Batteries","title":"Getting Started With `create_stackedbars()`","text":"Let’s demonstrate work related sets questions (survey batteries).","code":"# Create a social trust battery trust_battery <- c(\"trust_1a\", \"fair_1a\", \"helpful_1a\") trust_battery_labels <- c(   \"Interpersonal Trust\",   \"Perceived Fairness\",   \"Perceived Helpfulness\" )  # Create a comprehensive battery analysis plot9 <- create_stackedbars(   data = gss_likert,   questions = trust_battery,   question_labels = trust_battery_labels,   title = \"Social Trust Battery - Complete Analysis\",   subtitle = \"Comprehensive view of social trust dimensions with enhanced tooltips\",   x_label = \"Trust Dimension\",   stack_label = \"Response Category\",   stacked_type = \"percent\",   tooltip_prefix = \"Percentage: \",   tooltip_suffix = \"% of respondents\",   show_question_tooltip = TRUE,   include_na = TRUE,   na_label_stack= \"No answer\",   color_palette = c(\"#8c510a\", \"#d8b365\", \"#f6e8c3\", \"darkgrey\") ) ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). plot9"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"example-10-publication-ready-chart","dir":"Articles","previous_headings":"Best Practices and Tips","what":"Example 10: Publication-Ready Chart","title":"Getting Started With `create_stackedbars()`","text":"Let’s create fully customized, publication-ready chart.","code":"# Create the most polished example plot10 <- create_stackedbars(   data = gss_likert,   questions = social_questions,   question_labels = c(     \"Interpersonal Trust\\n('Can most people be trusted?')\",     \"Perceived Fairness\\n('Do people try to be fair?')\",     \"Perceived Helpfulness\\n('Are people helpful?')\"   ),   title = \"Social Capital Dimensions in American Society\",   subtitle = \"General Social Survey Panel 2016 (N = 2,867 respondents)\\nPercentage distribution of responses across social trust measures\",   x_label = \"Social Trust Dimension\",   stack_label = \"Response Category\",   stacked_type = \"percent\",   tooltip_prefix = \"\",   tooltip_suffix = \"% of respondents\",   x_tooltip_suffix = \"\",   include_na = TRUE,   na_label_stack = \"No response\",   color_palette = c(\"#b2182b\", \"#ef8a62\", \"#fddbc7\", \"darkgrey\"),   show_question_tooltip = TRUE ) ## Warning: `trust_1a` and `fair_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Warning: `trust_1a` and `helpful_1a` have conflicting value labels. ## ℹ Labels for these values will be taken from `trust_1a`. ## ✖ Values: 1 and 2 ## Note: Column 'response' was 'haven_labelled' and converted to factor (levels = values). plot10"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"key-features-demonstrated","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Key Features Demonstrated","title":"Getting Started With `create_stackedbars()`","text":"Multi-question visualization automatic wide--long data transformation Custom question labeling descriptive axis labels Response mapping ordering consistent presentation Missing value handling explicit NA categories Percentage vs. count displays different analytical needs Demographic subgroup analysis comparative insights Survey battery analysis related question sets Publication-ready styling comprehensive customization","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"best-practices-for-multi-question-charts","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Best Practices for Multi-Question Charts","title":"Getting Started With `create_stackedbars()`","text":"Choose questions similar response scales Use questions compatible response categories Consider mapping different scales common categories appropriate Order questions logically Group related concepts together Consider ordering typical response patterns (positive least positive) Place important questions first Use appropriate stacking type Use “percent” comparing response patterns across questions Use “normal” absolute counts matter proportions Handle missing data thoughtfully Decide whether missing patterns substantively meaningful Use include_na = TRUE non-response patterns important Provide clear labels missing categories Choose colors carefully Use consistent color schemes across related charts Consider meaning response categories (positive/negative) Ensure sufficient contrast adjacent categories Test colorblind accessibility Customize tooltips clarity Include question text tooltips helpful Use appropriate number formatting (percentages vs. counts) Provide context sample sizes relevant","code":""},{"path":"https://favstats.github.io/dashboardr/articles/stackedbars_vignette.html","id":"conclusion","dir":"Articles","previous_headings":"Summary and Best Practices","what":"Conclusion","title":"Getting Started With `create_stackedbars()`","text":"create_stackedbars() function provides powerful solution visualizing multiple Likert-type survey questions simultaneously. key advantages include: Automatic data transformation wide long format Flexible question labeling publication-ready displays Comprehensive customization options professional presentations Interactive tooltips enhanced data exploration Consistent handling survey data complexities leveraging GSS Panel 2020 dataset, ’ve demonstrated function can reveal patterns social attitudes, trust measures, survey constructs. ability compare response distributions across multiple related questions makes invaluable tool survey researchers, enabling communicate complex patterns public opinion social attitudes effectively. Whether ’re analyzing institutional confidence, social trust, life satisfaction, multi-item survey construct, create_stackedbars() provides flexibility polish needed exploratory analysis publication-ready visualizations.","code":""},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started With `create_timeline()`","text":"create_timeline() function creates interactive timeline visualizations survey data, particularly useful showing changes Likert-type responses time. Furthermore, function designed handle SPSS (.sav) data well, makes handy researchers accustomed working social science data format. vignette demonstrates use function General Social Survey (GSS) data. working data time, use gss_all data set. large data set, might take load.","code":""},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Getting Started With `create_timeline()`","text":"First, let’s load required packages define function:","code":"library(dplyr) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found library(highcharter) library(stringr) library(haven) library(dashboardr) library(gssr)  # Load GSS data data(gss_all)"},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"example-1-basic-stacked-area-chart","dir":"Articles","previous_headings":"","what":"Example 1: Basic Stacked Area Chart","title":"Getting Started With `create_timeline()`","text":"Let’s start simple stacked area chart showing confidence financial institutions time: chart shows public confidence financial institutions changed 1970s recent years, colored area representing different level confidence.","code":"plot1 <- create_timeline(   data = gss_all,   time_var = \"year\",   response_var = \"confinan\",   chart_type = \"stacked_area\",   title = \"Confidence in Financial Institutions Over Time\",   y_max = 100 )  plot1"},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"example-2-line-chart-with-grouping","dir":"Articles","previous_headings":"","what":"Example 2: Line Chart with Grouping","title":"Getting Started With `create_timeline()`","text":"Now let’s create line chart showing happiness trends gender: line chart displays separate lines combination happiness level gender, allowing us compare trends men women time.","code":"plot2 <- create_timeline(   data = gss_all,   time_var = \"year\",   response_var = \"happy\",   group_var = \"sex\",   chart_type = \"line\",   title = \"Happiness Trends by Gender\",   response_levels = c(\"very happy\", \"pretty happy\", \"not too happy\") )  plot2"},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"example-3-time-binning","dir":"Articles","previous_headings":"","what":"Example 3: Time Binning","title":"Getting Started With `create_timeline()`","text":"data spanning many years, can bin time variable decades: approach useful want show broader trends across time periods rather year--year changes.","code":"plot3 <- create_timeline(   data = gss_all,   time_var = \"year\",   response_var = \"satfin\",   chart_type = \"stacked_area\",   title = \"Financial Satisfaction by Decade\",   time_breaks = c(1970, 1980, 1990, 2000, 2010, 2020),   time_bin_labels = c(\"1970s\", \"1980s\", \"1990s\", \"2000s\", \"2010s\"),   y_max = 100 )  plot3"},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"example-4-controlling-response-order","dir":"Articles","previous_headings":"","what":"Example 4: Controlling Response Order","title":"Getting Started With `create_timeline()`","text":"can control order response categories ensure logical ordering: specifying response_levels, ensure health categories ordered worst best, making chart intuitive read.","code":"plot4 <- create_timeline(   data = gss_all,   time_var = \"year\",   response_var = \"health\",   chart_type = \"stacked_area\",   title = \"Self-Reported Health Over Time\",   response_levels = c(\"poor\", \"fair\", \"good\", \"excellent\"),   y_max = 100 )  plot4"},{"path":[]},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"check-your-data-first","dir":"Articles","previous_headings":"Tips for Using the Function","what":"1. Check Your Data First","title":"Getting Started With `create_timeline()`","text":"creating charts, ’s helpful examine data:","code":"# Check available variables names(gss_all)[1:20] #>  [1] \"year\"     \"id\"       \"wrkstat\"  \"hrs1\"     \"hrs2\"     \"evwork\"   #>  [7] \"occ\"      \"prestige\" \"wrkslf\"   \"wrkgovt\"  \"commute\"  \"industry\" #> [13] \"occ80\"    \"prestg80\" \"indus80\"  \"indus07\"  \"occonet\"  \"found\"    #> [19] \"occ10\"    \"occindv\"  # Check response levels for a variable gss_all %>%   select(happy) %>%   filter(!is.na(happy)) %>%   mutate(happy = haven::as_factor(happy, levels = \"labels\")) %>%   count(happy) #> # A tibble: 3 × 2 #>   happy             n #>   <fct>         <int> #> 1 very happy    21069 #> 2 pretty happy  39705 #> 3 not too happy 10095"},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"handle-missing-data","dir":"Articles","previous_headings":"Tips for Using the Function","what":"2. Handle Missing Data","title":"Getting Started With `create_timeline()`","text":"function automatically filters missing values, aware much data excluded:","code":"# Check data availability gss_all %>%   summarise(     total_rows = n(),     year_missing = sum(is.na(year)),     happy_missing = sum(is.na(happy)),     both_available = sum(!is.na(year) & !is.na(happy))   ) #> # A tibble: 1 × 4 #>   total_rows year_missing happy_missing both_available #>        <int>        <int>         <int>          <int> #> 1      75699            0          4830          70869"},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"interactive-features","dir":"Articles","previous_headings":"Tips for Using the Function","what":"3. Interactive Features","title":"Getting Started With `create_timeline()`","text":"resulting charts interactive Highcharts objects support: Hovering data points see exact values Clicking legend items show/hide series Zooming panning detailed exploration Exporting charts images data","code":""},{"path":"https://favstats.github.io/dashboardr/articles/timeline_vignette.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting Started With `create_timeline()`","text":"create_timeline() function provides flexible way visualize survey data trends time. function handles data processing creates interactive visualizations perfect exploring temporal patterns survey responses. function especially well-suited : Longitudinal survey analysis Public opinion research Social trend visualization Comparative analysis across groups Interactive reporting dashboards vignette provides comprehensive guide using function real GSS data, including practical examples tips effective usage.","code":""},{"path":"https://favstats.github.io/dashboardr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://favstats.github.io/dashboardr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). dashboardr: Package (One Line, Title Case). R package version 0.0.0.9000, https://favstats.github.io/dashboardr/.","code":"@Manual{,   title = {dashboardr: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://favstats.github.io/dashboardr/}, }"},{"path":"https://favstats.github.io/dashboardr/index.html","id":"dashboardr-","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal dashboardr …","code":""},{"path":"https://favstats.github.io/dashboardr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version dashboardr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"favstats/dashboardr\")"},{"path":"https://favstats.github.io/dashboardr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(dashboardr) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://favstats.github.io/dashboardr/reference/add_dashboard_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a page to the dashboard — add_dashboard_page","title":"Add a page to the dashboard — add_dashboard_page","text":"Universal function adding type page dashboard. Can create landing pages, analysis pages, pages, combination text visualizations. content markdown-compatible.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/add_dashboard_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a page to the dashboard — add_dashboard_page","text":"","code":"add_dashboard_page(   proj,   name,   data = NULL,   data_path = NULL,   template = NULL,   params = list(),   visualizations = NULL,   text = NULL,   icon = NULL,   is_landing_page = FALSE )"},{"path":"https://favstats.github.io/dashboardr/reference/add_dashboard_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a page to the dashboard — add_dashboard_page","text":"proj dashboard_project object name Page display name data Optional data frame save page data_path Path existing data file (alternative data parameter) template Optional custom template file path params Parameters template substitution visualizations viz_collection list visualization specs text Optional markdown text content page icon Optional iconify icon shortcode (e.g., \"ph:users-three\") is_landing_page Whether landing page (default: FALSE)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/add_dashboard_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a page to the dashboard — add_dashboard_page","text":"updated dashboard_project object","code":""},{"path":"https://favstats.github.io/dashboardr/reference/add_dashboard_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a page to the dashboard — add_dashboard_page","text":"","code":"if (FALSE) { # \\dontrun{ # Landing page dashboard <- create_dashboard(\"test\") %>%   add_page(\"Welcome\", text = \"# Welcome\\n\\nThis is the main page.\", is_landing_page = TRUE)  # Analysis page with data and visualizations dashboard <- dashboard %>%   add_page(\"Demographics\", data = survey_data, visualizations = demo_viz)  # Text-only about page dashboard <- dashboard %>%   add_page(\"About\", text = \"# About This Study\\n\\nThis dashboard shows...\")  # Mixed content page dashboard <- dashboard %>%   add_page(\"Results\", text = \"# Key Findings\\n\\nHere are the results:\",            visualizations = results_viz, icon = \"ph:chart-line\") } # }"},{"path":"https://favstats.github.io/dashboardr/reference/add_viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a visualization to the collection — add_viz","title":"Add a visualization to the collection — add_viz","text":"Adds single visualization specification existing collection. Visualizations tabgroup value organized tabs generated page.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/add_viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a visualization to the collection — add_viz","text":"","code":"add_viz(   viz_collection,   type,   ...,   tabgroup = NULL,   title = NULL,   text = NULL,   icon = NULL,   text_position = \"above\",   height = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/add_viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a visualization to the collection — add_viz","text":"viz_collection viz_collection object type Visualization type: \"stackedbar\", \"heatmap\", \"histogram\", \"timeline\" ... Additional parameters passed visualization function tabgroup Optional group ID organizing related visualizations title Display title visualization text Optional markdown text display visualization icon Optional iconify icon shortcode visualization text_position Position text relative visualization (\"\" \"\") height Optional height pixels highcharter visualizations (numeric value)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/add_viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a visualization to the collection — add_viz","text":"updated viz_collection object","code":""},{"path":"https://favstats.github.io/dashboardr/reference/add_viz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a visualization to the collection — add_viz","text":"","code":"if (FALSE) { # \\dontrun{ page1_viz <- create_viz() %>%   add_viz(type = \"stackedbar\", x_var = \"education\", stack_var = \"gender\",           title = \"Education by Gender\", tabgroup = \"demographics\",           text = \"This chart shows educational attainment by gender.\",           icon = \"ph:chart-bar\") } # }"},{"path":"https://favstats.github.io/dashboardr/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Bootstrap card component — card","title":"Create a Bootstrap card component — card","text":"Helper function create Bootstrap card components displaying content structured way. Useful author profiles, feature highlights, content benefits card layout.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Bootstrap card component — card","text":"","code":"card(   content,   title = NULL,   image = NULL,   image_alt = NULL,   footer = NULL,   class = NULL,   style = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Bootstrap card component — card","text":"content Card content (text, HTML, elements) title Optional card title image Optional image URL path image_alt Alt text image footer Optional card footer content class Additional CSS classes card style Additional inline styles card","code":""},{"path":"https://favstats.github.io/dashboardr/reference/card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Bootstrap card component — card","text":"HTML div element Bootstrap card classes","code":""},{"path":"https://favstats.github.io/dashboardr/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Bootstrap card component — card","text":"","code":"if (FALSE) { # \\dontrun{ # Simple text card card(\"This is a simple card with just text content\")  # Card with title and image card(   content = \"This is the card body content\",   title = \"Card Title\",   image = \"https://example.com/image.jpg\",   image_alt = \"Description of image\" )  # Author card card(   content = \"Dr. Jane Smith is a researcher specializing in data science and visualization.\",   title = \"Dr. Jane Smith\",   image = \"https://example.com/jane.jpg\",   footer = \"Website: janesmith.com\" ) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/card_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Display cards in a Bootstrap row — card_row","title":"Display cards in a Bootstrap row — card_row","text":"Helper function display multiple cards responsive Bootstrap row layout.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/card_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display cards in a Bootstrap row — card_row","text":"","code":"card_row(..., cols = 2, class = NULL)"},{"path":"https://favstats.github.io/dashboardr/reference/card_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display cards in a Bootstrap row — card_row","text":"... Card objects display cols Number columns per row (default: 2) class Additional CSS classes row","code":""},{"path":"https://favstats.github.io/dashboardr/reference/card_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display cards in a Bootstrap row — card_row","text":"HTML div element Bootstrap row classes containing cards","code":""},{"path":"https://favstats.github.io/dashboardr/reference/card_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display cards in a Bootstrap row — card_row","text":"","code":"if (FALSE) { # \\dontrun{ # Display two cards in a row card_row(card1, card2)  # Display three cards in a row (3 columns) card_row(card1, card2, card3, cols = 3) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/create_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dashboard — create_dashboard","title":"Create a dashboard — create_dashboard","text":"Initializes dashboard project object can built using piping workflow add_landingpage() add_page().","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dashboard — create_dashboard","text":"","code":"create_dashboard(   output_dir = \"site\",   title = \"Dashboard\",   logo = NULL,   favicon = NULL,   github = NULL,   twitter = NULL,   linkedin = NULL,   email = NULL,   website = NULL,   search = TRUE,   theme = NULL,   custom_css = NULL,   custom_scss = NULL,   author = NULL,   description = NULL,   page_footer = NULL,   date = NULL,   sidebar = FALSE,   sidebar_style = \"docked\",   sidebar_background = \"light\",   sidebar_foreground = NULL,   sidebar_border = TRUE,   sidebar_alignment = \"left\",   sidebar_collapse_level = 2,   sidebar_pinned = FALSE,   sidebar_tools = NULL,   sidebar_contents = NULL,   breadcrumbs = TRUE,   page_navigation = FALSE,   back_to_top = FALSE,   reader_mode = FALSE,   repo_url = NULL,   repo_actions = NULL,   navbar_style = NULL,   navbar_brand = NULL,   navbar_toggle = NULL,   math = NULL,   code_folding = NULL,   code_tools = NULL,   toc = NULL,   toc_depth = 3,   google_analytics = NULL,   plausible = NULL,   gtag = NULL,   value_boxes = FALSE,   metrics_style = NULL,   page_layout = NULL,   shiny = FALSE,   observable = FALSE,   jupyter = FALSE,   publish_dir = NULL,   github_pages = NULL,   netlify = NULL,   allow_inside_pkg = FALSE,   warn_before_overwrite = TRUE,   sidebar_groups = NULL,   navbar_sections = NULL )  create_dashboard(   output_dir = \"site\",   title = \"Dashboard\",   logo = NULL,   favicon = NULL,   github = NULL,   twitter = NULL,   linkedin = NULL,   email = NULL,   website = NULL,   search = TRUE,   theme = NULL,   custom_css = NULL,   custom_scss = NULL,   author = NULL,   description = NULL,   page_footer = NULL,   date = NULL,   sidebar = FALSE,   sidebar_style = \"docked\",   sidebar_background = \"light\",   sidebar_foreground = NULL,   sidebar_border = TRUE,   sidebar_alignment = \"left\",   sidebar_collapse_level = 2,   sidebar_pinned = FALSE,   sidebar_tools = NULL,   sidebar_contents = NULL,   breadcrumbs = TRUE,   page_navigation = FALSE,   back_to_top = FALSE,   reader_mode = FALSE,   repo_url = NULL,   repo_actions = NULL,   navbar_style = NULL,   navbar_brand = NULL,   navbar_toggle = NULL,   math = NULL,   code_folding = NULL,   code_tools = NULL,   toc = NULL,   toc_depth = 3,   google_analytics = NULL,   plausible = NULL,   gtag = NULL,   value_boxes = FALSE,   metrics_style = NULL,   page_layout = NULL,   shiny = FALSE,   observable = FALSE,   jupyter = FALSE,   publish_dir = NULL,   github_pages = NULL,   netlify = NULL,   allow_inside_pkg = FALSE,   warn_before_overwrite = TRUE,   sidebar_groups = NULL,   navbar_sections = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/create_dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dashboard — create_dashboard","text":"output_dir Directory generated files title Overall title dashboard site logo Optional logo filename (copied output directory) favicon Optional favicon filename (copied output directory) github GitHub repository URL (optional) twitter Twitter profile URL (optional) linkedin LinkedIn profile URL (optional) email Email address (optional) website Website URL (optional) search Enable search functionality (default: TRUE) theme Bootstrap theme (cosmo, flatly, journal, etc.) (optional) custom_css Path custom CSS file (optional) custom_scss Path custom SCSS file (optional) author Author name site (optional) description Site description SEO (optional) page_footer Custom footer text (optional) date Site creation/update date (optional) sidebar Enable/disable global sidebar (default: FALSE) sidebar_style Sidebar style (floating, docked, etc.) (optional) sidebar_background Sidebar background color (optional) navbar_style Navbar style (default, dark, light) (optional) navbar_brand Custom brand text (optional) navbar_toggle Mobile menu toggle behavior (optional) math Enable/disable math rendering (katex, mathjax) (optional) code_folding Code folding behavior (none, show, hide) (optional) code_tools Code tools (copy, download, etc.) (optional) toc Table contents (floating, left, right) (optional) toc_depth TOC depth level (default: 3) google_analytics Google Analytics ID (optional) plausible Plausible analytics domain (optional) gtag Google Tag Manager ID (optional) value_boxes Enable value box styling (default: FALSE) metrics_style Metrics display style (optional) shiny Enable Shiny interactivity (default: FALSE) observable Enable Observable JS (default: FALSE) jupyter Enable Jupyter widgets (default: FALSE) publish_dir Custom publish directory (optional) github_pages GitHub Pages configuration (optional) netlify Netlify deployment settings (optional) allow_inside_pkg Allow output directory inside package (default FALSE) warn_before_overwrite Warn overwriting existing files (default TRUE) sidebar_groups List sidebar groups hybrid navigation (optional) navbar_sections List navbar sections link sidebar groups (optional) data data.frame named list data.frames (multi-page site). dashboard_name Name dashboard (used site = FALSE). site TRUE, scaffold website index + dashboards. render TRUE, render HTML Quarto immediately. open TRUE, open rendered HTML browser (forces render).","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dashboard — create_dashboard","text":"dashboard_project object","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_dashboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dashboard — create_dashboard","text":"","code":"if (FALSE) { # \\dontrun{ # Basic dashboard dashboard <- create_dashboard(\"my_dashboard\", \"My Analysis Dashboard\")  # Comprehensive dashboard with all features dashboard <- create_dashboard(   \"my_dashboard\",   \"My Analysis Dashboard\",   logo = \"logo.png\",   github = \"https://github.com/username/repo\",   twitter = \"https://twitter.com/username\",   theme = \"cosmo\",   author = \"Dr. Jane Smith\",   description = \"Comprehensive data analysis dashboard\",   page_footer = \"© 2024 Company Name\",   sidebar = TRUE,   toc = \"floating\",   google_analytics = \"GA-XXXXXXXXX\",   value_boxes = TRUE,   shiny = TRUE ) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/create_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Heatmap — create_heatmap","title":"Create a Heatmap — create_heatmap","text":"function creates heatmap bivariate data, visualizing relationship two categorical variables numeric value using color intensity. handles ordered factors, ensures combinations plotted, allows extensive customization. also includes robust handling missing values (NA) allowing displayed explicit categories.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Heatmap — create_heatmap","text":"","code":"create_heatmap(   data,   x_var,   y_var,   value_var,   title = NULL,   subtitle = NULL,   x_label = NULL,   y_label = NULL,   value_label = NULL,   tooltip_prefix = \"\",   tooltip_suffix = \"\",   x_tooltip_suffix = \"\",   y_tooltip_suffix = \"\",   x_tooltip_prefix = \"\",   y_tooltip_prefix = \"\",   x_order = NULL,   y_order = NULL,   color_min = NULL,   color_max = NULL,   color_palette = c(\"#FFFFFF\", \"#7CB5EC\"),   na_color = \"transparent\",   data_labels_enabled = TRUE,   data_labels_format = \"{point.value}\",   include_na = FALSE,   na_label_x = \"(Missing)\",   na_label_y = \"(Missing)\",   x_map_values = NULL,   y_map_values = NULL,   agg_fun = mean )"},{"path":"https://favstats.github.io/dashboardr/reference/create_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Heatmap — create_heatmap","text":"data data frame containing variables plot. x_var String. Name column X-axis categories. y_var String. Name column Y-axis categories. value_var String. Name numeric column whose values determine color intensity. title Optional string. Main chart title. subtitle Optional string. Chart subtitle. x_label Optional string. X-axis label. Defaults x_var. y_label Optional string. Y-axis label. Defaults y_var. value_label Optional string. Label color axis. Defaults value_var. tooltip_prefix Optional string prepended tooltip value. tooltip_suffix Optional string appended tooltip value. x_tooltip_suffix Optional string appended x value tooltip. y_tooltip_suffix Optional string appended y value tooltip. x_tooltip_prefix Optional string prepended x value tooltip. y_tooltip_prefix Optional string prepended y value tooltip. x_order Optional character vector order factor levels x_var. y_order Optional character vector order factor levels y_var. color_min Optional numeric. Minimum value color axis. NULL, defaults data min. color_max Optional numeric. Maximum value color axis. NULL, defaults data max. color_palette Optional character vector colors color gradient. Example: c(\"#FFFFFF\", \"#7CB5EC\") white light blue. Can also single color gradient start. na_color Optional string. Color NA values value_var cells. Default \"transparent\". data_labels_enabled Logical. TRUE, display data labels cell. Default TRUE. data_labels_format Optional string. Format data labels. Default \"point.value\". include_na Logical. TRUE, treats NA values x_var y_var explicit categories using na_label_x na_label_y. FALSE (default), rows NA x_var y_var excluded aggregation. na_label_x Optional string. Custom label NA values x_var. Defaults \"(Missing)\". na_label_y Optional string. Custom label NA values y_var. Defaults \"(Missing)\". x_map_values Optional named list recode x_var values display. y_map_values Optional named list recode y_var values display. agg_fun Function aggregate duplicate x/y combinations. Default mean.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Heatmap — create_heatmap","text":"highcharter heatmap object.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Heatmap — create_heatmap","text":"function performs following steps: Input validation: Checks data, x_var, y_var, value_var. Data Preparation: Handles haven_labelled columns converting factors. Applies value mapping x_map_values y_map_values (new parameter) provided. Processes NA values x_var y_var: include_na = TRUE, NAs converted specified label; otherwise, rows NAs variables filtered . Converts x_var y_var factors applies x_order y_order. Uses tidyr::complete ensure x_var/y_var combinations present, filling missing value_var NA_real_ (appear na_color heatmap). Chart Construction: Initializes highchart object. Configures title, subtitle, axis labels. Sets hc_colorAxis based color_min, color_max, color_palette. Adds heatmap series using hc_add_series, mapping x_var, y_var, value_var. Customizes plotOptions heatmap, including data labels nullColor. Tooltip Customization: Defines JavaScript tooltip.formatter detailed hover information.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Heatmap — create_heatmap","text":"","code":"#TODO: something is off here so will comment out for now # Example 1: Average Age by Education and Gender # Let's create a heatmap showing the average age across education levels and gender. # We will use the GSS dataset from 2020  # Step 1: Prepare data for heatmap #age_education_data <- gss_clean %>% #   filter(!is.na(degree_3), !is.na(sex_3), !is.na(age_3)) %>% #   group_by(degree_3, sex_3) %>% #   summarise(avg_age = mean(age_3, na.rm = TRUE), .groups = 'drop')  # Step 2: Create basic heatmap # plot1 <- create_heatmap( #   data = age_education_data, #   x_var = \"degree_3\", #   y_var = \"sex_3\", #   value_var = \"avg_age\", #   title = \"Average Age by Education Level and Gender\", #   subtitle = \"GSS Panel 2020 - Wave 3\", #   x_label = \"Education Level\", #   y_label = \"Gender\", #   value_label = \"Average Age\", #   color_palette = c(\"#ffffff\", \"#2E86AB\") # )  plot1 #> Error: object 'plot1' not found"},{"path":"https://favstats.github.io/dashboardr/reference/create_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Histogram — create_histogram","title":"Create an Histogram — create_histogram","text":"function creates histogram survey data. handles raw (unaggregated) data, counting occurences categories, supporting ordered factors, allowing numerical x-axis variables binned custom groups, enables renaming categorical values display. can also handle SPSS (.sav) columns automatically.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Histogram — create_histogram","text":"","code":"create_histogram(   data,   x_var,   y_var = NULL,   title = NULL,   subtitle = NULL,   x_label = NULL,   y_label = NULL,   histogram_type = c(\"count\", \"percent\"),   tooltip_prefix = \"\",   tooltip_suffix = \"\",   x_tooltip_suffix = \"\",   bins = NULL,   bin_breaks = NULL,   bin_labels = NULL,   include_na = FALSE,   na_label = \"(Missing)\",   color = NULL,   x_map_values = NULL,   x_order = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/create_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Histogram — create_histogram","text":"data data frame containing variable plot. x_var String. Name numeric column histogram. y_var Optional string. Name pre-computed count column. supplied, function skips counting uses column y. title Optional string. Main chart title. subtitle Optional string. Chart subtitle. x_label Optional string. X-axis label. Defaults x_var. y_label Optional string. Y-axis label. Defaults \"Count\" \"Percentage\". histogram_type One \"count\" \"percent\". Default \"count\". tooltip_prefix Optional string prepended tooltip. tooltip_suffix Optional string appended tooltip. x_tooltip_suffix Optional string appended x value tooltip. bins Optional integer. Number bins compute via hist(). bin_breaks Optional numeric vector cut points. bin_labels Optional character vector labels bins. Must length length(breaks)-1. include_na Logical. TRUE, treats NA explicit category. na_label Optional string. Custom label NA values. Defaults \"(Missing)\". color Optional string vector colors bars. x_map_values Optional named list recode raw x_var values binning. x_order Optional character vector order factor levels binned variable.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Histogram — create_histogram","text":"highcharter histogram (column) plot object.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_histogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Histogram — create_histogram","text":"function performs following steps: Input validation: Checks data data frame x_var (y_var given) exist. Haven-labelled handling: x_var class \"haven_labelled\", converts numeric. Value mapping: x_map_values provided, recodes raw values binning. Binning: bins set (bin_breaks NULL), computes breaks via hist(). bin_breaks provided, cuts x_var categories, using bin_labels supplied. Otherwise uses raw x_var values. Factor NA handling: Converts plotting variable factor; include_na = TRUE, adds explicit \"(NA)\" level. Applies x_order given. Aggregation: y_var NULL, counts occurrences factor level. Otherwise renames y_var n skips counting. Chart construction: Builds highcharter column chart n vs. factor levels. Customization: Applies title, subtitle, axis labels. Sets stacking mode (percent vs. count), data labels format. Defines JS tooltip.formatter using tooltip_prefix, tooltip_suffix, x_tooltip_suffix. Applies custom color provided.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Histogram — create_histogram","text":"","code":"#We will work with data from the GSS. The GSS dataset (`gssr`) is a dependency of #our `dashboardr` package.  #Filter to recent years and select relevant variables #TODO: some of the examples look off for example plot 4 and 5 gss_recent <- gss_all %>%   filter(year >= 2010) %>%   select(age, degree, happy, sex, race, year) #> Error in select(., age, degree, happy, sex, race, year): could not find function \"select\"  # Example 1: Basic histogram of age distribution plot1 <- create_histogram(   data = gss_recent,   x_var = \"age\",   title = \"Age Distribution in GSS Data (2010+)\",   subtitle = \"General Social Survey respondents\",   x_label = \"Age (years)\",   y_label = \"Number of Respondents\",   bins = 15,   color = \"hotpink\" ) #> Error: object 'gss_recent' not found plot1 #> Error: object 'plot1' not found  # Example 2: Education levels with custom mapping and ordering # First check the unique values # unique(gss_recent$degree) # \"Lt High School\", \"High School\", \"Junior College\", \"Bachelor\", \"Graduate\"  education_order <- c(\"Lt High School\", \"High School\", \"Junior College\", \"Bachelor\", \"Graduate\")  plot2 <- create_histogram(   data = gss_recent,   x_var = \"degree\",   title = \"Educational Attainment Distribution\",   subtitle = \"GSS respondents 2010-present\",   x_label = \"Highest Degree Completed\",   y_label = \"Count\",   histogram_type = \"count\",   x_order = education_order,   include_na = TRUE, ) #> Error: object 'gss_recent' not found plot2 #> Error: object 'plot2' not found  # Example 3: Happiness levels as percentages with custom labels happiness_map <- list(   \"Very Happy\" = \"Very Happy!\",   \"Pretty Happy\" = \"Pretty Happy\",   \"Not Too Happy\" = \"Not Too Happy :|\" )  plot3 <- create_histogram(   data = gss_recent,   x_var = \"happy\",   title = \"Self-Reported Happiness Levels\",   subtitle = \"Percentage distribution among GSS respondents\",   x_label = \"Happiness Level\",   y_label = \"Percentage of Respondents\",   histogram_type = \"percent\",   x_map_values = happiness_map,   tooltip_suffix = \"%\",   include_na = TRUE,   na_label = \"No Response\", ) #> Error: object 'gss_recent' not found plot3 #> Error: object 'plot3' not found  # Example 4: Age binning with custom breaks and labels age_breaks <- c(18, 30, 45, 60, 75, Inf) age_labels <- c(\"18-29\", \"30-44\", \"45-59\", \"60-74\", \"75+\")  plot4 <- create_histogram(   data = gss_recent,   x_var = \"age\",   title = \"Age Groups in GSS Sample\",   subtitle = \"Custom age categories\",   x_label = \"Age Group\",   y_label = \"Number of Respondents\",   bin_breaks = age_breaks,   bin_labels = age_labels,   tooltip_prefix = \"Count: \",   x_tooltip_suffix = \" years old\",   color = \"seagreen1\" ) #> Error: object 'gss_recent' not found plot4 #> Error: object 'plot4' not found  # Example 5: Using pre-aggregated data # Create aggregated data first race_counts <- gss_recent %>%   count(race, name = \"respondent_count\") %>%   filter(!is.na(race)) #> Error in count(., race, name = \"respondent_count\"): could not find function \"count\"  plot5 <- create_histogram(   data = race_counts,   x_var = \"race\",   y_var = \"respondent_count\",  # Use pre-computed counts   title = \"Racial Distribution in GSS Sample\",   subtitle = \"Based on pre-aggregated data\",   x_label = \"Race/Ethnicity\",   y_label = \"Number of Respondents\", ) #> Error: object 'race_counts' not found plot5 #> Error: object 'plot5' not found"},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stacked Bar Chart — create_stackedbar","title":"Create a Stacked Bar Chart — create_stackedbar","text":"function creates stacked barchart survey data. handles raw (unaggregated) data, counting occurrences categories, supporting ordered factors, allowing numerical x-axis stacked variables binned custom groups, enables renaming categorical values display. can also handle SPSS (.sav) columns automatically.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stacked Bar Chart — create_stackedbar","text":"","code":"create_stackedbar(   data,   x_var,   y_var = NULL,   stack_var,   title = NULL,   subtitle = NULL,   x_label = NULL,   y_label = NULL,   stack_label = NULL,   stacked_type = c(\"normal\", \"percent\"),   tooltip_prefix = \"\",   tooltip_suffix = \"\",   x_tooltip_suffix = \"\",   color_palette = NULL,   stack_order = NULL,   x_order = NULL,   include_na = FALSE,   na_label_x = \"(Missing)\",   na_label_stack = \"(Missing)\",   x_breaks = NULL,   x_bin_labels = NULL,   x_map_values = NULL,   stack_breaks = NULL,   stack_bin_labels = NULL,   stack_map_values = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stacked Bar Chart — create_stackedbar","text":"data data frame containing raw survey data (e.g., one row per respondent). x_var name column plotted X-axis (string). typically represents demographic variable question. y_var Optional. name column already contains counts values y-axis (string). NULL (default), function internally count occurrences x_var stack_var. provide data already aggregated. stack_var name column whose unique values define stacks within bar (string). often Likert scale, agreement level, another categorical response. title Optional. main title chart (string). subtitle Optional. subtitle chart (string). x_label Optional. label X-axis (string). Defaults x_var x_var (Binned). y_label Optional. label Y-axis (string). Defaults \"Number Respondents\" \"Percentage Respondents\". stack_label Optional. title stack legend (string). Defaults stack_var stack_var (Binned). stacked_type Optional. type stacking. Can \"normal\" (counts) \"percent\" (100% stacked). Defaults \"normal\". tooltip_prefix Optional. string prepend values tooltips. tooltip_suffix Optional. string append values tooltips. x_tooltip_suffix Optional. string append x-axis values tooltips. color_palette Optional. character vector colors use stacks. NULL, highcharter's default palette used. Consider ordering colors match stack_order. stack_order Optional. character vector specifying desired order stack_var levels. crucial ordinal scales (e.g., Likert 1-7). NULL, default factor order alphabetical used. Levels found data ignored. x_order Optional. character vector specifying desired order x_var levels. NULL, default factor order alphabetical used. include_na Logical. TRUE, explicit NA categories shown counts x_var stack_var. FALSE (default), rows NA x_var stack_var dropped. na_label_x Optional string. Custom label NA values x_var. Defaults \"(Missing)\". na_label_stack Optional string. Custom label NA values stack_var. Defaults \"(Missing)\". x_breaks Optional. numeric vector cut points x_var continuous variable want bin . e.g., c(16, 24, 33, 42, 51, 60, Inf). x_bin_labels Optional. character vector labels bins created x_breaks. Must one less number breaks (Inf last break). x_map_values Optional. named list (e.g., list(\"1\" = \"Female\", \"2\" = \"Male\")) rename values within x_var display. Original values names, new labels values. stack_breaks Optional. numeric vector cut points stack_var continuous variable want bin . stack_bin_labels Optional. character vector labels bins created stack_breaks. Must one less number breaks (Inf last break). stack_map_values Optional. named list (e.g., list(\"1\" = \"Strongly Disagree\", \"7\" = \"Strongly Agree\")) rename values within stack_var display.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stacked Bar Chart — create_stackedbar","text":"interactive highcharter bar chart plot object.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Stacked Bar Chart — create_stackedbar","text":"function performs following steps: Input Validation: Checks provided data data frame x_var stack_var columns exist. Data Copy: Creates mutable copy input data perform transformations without affecting original. Handle 'haven_labelled' Columns: haven package available, detects x_var stack_var class haven_labelled (common data imported SPSS/Stata/SAS). , converts standard R factors, using underlying numeric values levels (e.g., '1' labeled \"Male\" become factor level \"1\"). ensures recode can operate correctly. Apply Value Mapping (x_map_values, stack_map_values): provided, x_map_values stack_map_values (named lists, e.g., list(\"1\"=\"Male\")) used rename values x_var stack_var respectively. useful converting numeric codes abbreviations descriptive labels. column factor, temporarily converted character ensure dplyr::recode works reliably values. Handle Binning (x_breaks, x_bin_labels, stack_breaks, stack_bin_labels): x_var (stack_var) numeric corresponding _breaks provided, function uses base::cut() discretize numeric variable bins. _bin_labels can supplied give custom names bins (e.g., \"18-24\" instead \"(17,25]\"). provided, cut() generates default labels. temporary column (e.g., .x_var_binned) created hold binned values, temporary column used plotting. Data Aggregation Final Factor Handling: data transformed using dplyr::mutate ensure x_var stack_var (binned versions) treated factors. include_na = TRUE, missing values converted explicit \"(NA)\" factor level. dplyr::count() used aggregate data, counting occurrences unique combination x_var stack_var. creates n column required highcharter. Apply Custom Ordering (x_order, stack_order): provided, x_order stack_order used set display order factor levels X-axis stack categories, respectively. essential ordinal scales (e.g., Likert scales) custom desired sorting. Levels found order vector appended end. Highcharter Chart Generation: aggregated plot_data passed highcharter::hchart() create base stacked column chart. Chart Customization: Titles, subtitles, axis labels, stacking type (normal vs. percent), data labels, legend titles, tooltips, custom color palettes applied based function's arguments. Return Value: function returns highcharter plot object, can printed directly display interactive chart.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stacked Bar Chart — create_stackedbar","text":"","code":"# We will be using data from GSS for these examples. # Make sure you have the data loaded: data(gss_all) #> Warning: data set ‘gss_all’ not found  # Filter to recent years and select relevant variables gss_recent <- gss_all %>%   filter(year >= 2010) %>%   select(age, degree, happy, sex, race, year, polviews, attend) #> Error in select(., age, degree, happy, sex, race, year, polviews, attend): could not find function \"select\"  # Example 1: Basic stacked bar - Education by Gender education_order <- c(\"Lt High School\", \"High School\", \"Junior College\", \"Bachelor\", \"Graduate\")  plot1 <- create_stackedbar(   data = gss_recent,   x_var = \"degree\",   stack_var = \"sex\",   title = \"Educational Attainment by Gender\",   subtitle = \"GSS respondents 2010-present\",   x_label = \"Highest Degree Completed\",   y_label = \"Number of Respondents\",   stack_label = \"Gender\",   x_order = education_order, ) #> Error: object 'gss_recent' not found plot1 #> Error: object 'plot1' not found  # Example 2: Percentage stacked - Happiness by Education Level plot2 <- create_stackedbar(   data = gss_recent,   x_var = \"degree\",   stack_var = \"happy\",   title = \"Happiness Distribution Across Education Levels\",   subtitle = \"Percentage breakdown within each education category\",   x_label = \"Education Level\",   y_label = \"Percentage of Respondents\",   stack_label = \"Happiness Level\",   stacked_type = \"percent\",   x_order = education_order,   stack_order = c(\"Very Happy\", \"Pretty Happy\", \"Not Too Happy\"),   tooltip_suffix = \"%\",   color_palette = c(\"turquoise\", \"slateblue\", \"steelblue\") ) #> Error: object 'gss_recent' not found plot2 #> Error: object 'plot2' not found  # Example 3: Age binning with political views age_breaks <- c(18, 30, 45, 60, 75, Inf) age_labels <- c(\"18-29\", \"30-44\", \"45-59\", \"60-74\", \"75+\")  # Map political views to shorter labels polviews_map <- list(   \"Extremely Liberal\" = \"Ext Liberal\",   \"Liberal\" = \"Liberal\",   \"Slightly Liberal\" = \"Sl Liberal\",   \"Moderate\" = \"Moderate\",   \"Slightly Conservative\" = \"Sl Conservative\",   \"Conservative\" = \"Conservative\",   \"Extremely Conservative\" = \"Ext Conservative\" )  plot3 <- create_stackedbar(   data = gss_recent,   x_var = \"age\",   stack_var = \"polviews\",   title = \"Political Views by Age Group\",   subtitle = \"Distribution of political ideology across age cohorts\",   x_label = \"Age Group\",   stack_label = \"Political Views\",   x_breaks = age_breaks,   x_bin_labels = age_labels,   stack_map_values = polviews_map,   stacked_type = \"percent\",   tooltip_suffix = \"%\",   x_tooltip_suffix = \" years\", ) #> Error: object 'gss_recent' not found plot3 #> Error: object 'plot3' not found  # Example 4: Including NA values with custom labels plot4 <- create_stackedbar(   data = gss_recent,   x_var = \"race\",   stack_var = \"attend\",   title = \"Religious Attendance by Race/Ethnicity\",   subtitle = \"Including non-responses as explicit category\",   x_label = \"Race/Ethnicity\",   stack_label = \"Religious Attendance\",   include_na = TRUE,   na_label_x = \"Not Specified\",   na_label_stack = \"No Answer\",   stacked_type = \"percent\",   tooltip_suffix = \"%\" ) #> Error: object 'gss_recent' not found plot4 #> Error: object 'plot4' not found  # Example 5: Using pre-aggregated data # Create aggregated data first education_gender_counts <- gss_recent %>%   filter(!is.na(degree) & !is.na(sex)) %>%   count(degree, sex, name = \"respondent_count\") %>%   mutate(degree = factor(degree, levels = education_order)) #> Error in mutate(., degree = factor(degree, levels = education_order)): could not find function \"mutate\"  plot5 <- create_stackedbar(   data = education_gender_counts,   x_var = \"degree\",   y_var = \"respondent_count\",  # Use pre-computed counts   stack_var = \"sex\",   title = \"Education by Gender (Pre-aggregated Data)\",   subtitle = \"Using pre-computed counts\",   x_label = \"Education Level\",   y_label = \"Number of Respondents\",   stack_label = \"Gender\", ) #> Error: object 'education_gender_counts' not found plot5 #> Error: object 'plot5' not found  # Example 6: Complex mapping with custom ordering # Map sex to more descriptive labels sex_map <- list(\"Male\" = \"Men\", \"Female\" = \"Women\")  plot6 <- create_stackedbar(   data = gss_recent,   x_var = \"happy\",   stack_var = \"sex\",   title = \"Gender Distribution Across Happiness Levels\",   subtitle = \"With custom gender labels and happiness ordering\",   x_label = \"Self-Reported Happiness\",   stack_label = \"Gender\",   x_order = c(\"Very Happy\", \"Pretty Happy\", \"Not Too Happy\"),   stack_map_values = sex_map,   stack_order = c(\"Women\", \"Men\"),   stacked_type = \"normal\",   tooltip_prefix = \"Count: \", ) #> Error: object 'gss_recent' not found plot6 #> Error: object 'plot6' not found"},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbars.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked Bar Charts — create_stackedbars","title":"Stacked Bar Charts — create_stackedbars","text":"Turns wide survey data (one column per question) long format creates stacked‐bar chart bar question stack Likert‐type response category.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked Bar Charts — create_stackedbars","text":"","code":"create_stackedbars(   data,   questions,   question_labels = NULL,   response_levels = NULL,   title = NULL,   subtitle = NULL,   x_label = NULL,   y_label = NULL,   stack_label = NULL,   stacked_type = c(\"normal\", \"percent\"),   tooltip_prefix = \"\",   tooltip_suffix = \"\",   x_tooltip_suffix = \"\",   color_palette = NULL,   stack_order = NULL,   x_order = NULL,   include_na = FALSE,   na_label_x = \"(Missing)\",   na_label_stack = \"(Missing)\",   x_breaks = NULL,   x_bin_labels = NULL,   x_map_values = NULL,   stack_breaks = NULL,   stack_bin_labels = NULL,   stack_map_values = NULL,   show_question_tooltip = TRUE )"},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked Bar Charts — create_stackedbars","text":"data data frame one column per survey question (one row per respondent). questions Character vector column names pivot (survey questions). question_labels Optional character vector labels questions. Must length questions. NULL, questions used labels. response_levels Optional character vector factor levels Likert responses (e.g. c(\"Strongly Disagree\", …, \"Strongly Agree\")). title Optional main title chart. subtitle Optional subtitle chart. x_label Optional label X‐axis. Defaults \"Questions\". y_label Optional label Y‐axis. Defaults \"Number Respondents\" \"Percentage Respondents\" stacked_type = \"percent\". stack_label Optional title stack legend. Defaults \"Response\". stacked_type Type stacking: \"normal\" (counts) \"percent\" (100% stacked). Defaults \"normal\". tooltip_prefix Optional string prepended tooltip values. tooltip_suffix Optional string appended tooltip values. x_tooltip_suffix Optional string appended X‐axis tooltip values. color_palette Optional character vector colors stacks. stack_order Optional character vector specifying order response levels. x_order Optional character vector specifying order questions. include_na Logical. TRUE, NA values shown explicit categories; FALSE, rows NA question response dropped. Default FALSE. na_label_x Optional string. Custom label NA values questions. Defaults \"(Missing)\". na_label_stack Optional string. Custom label NA values responses. Defaults \"(Missing)\". x_breaks Optional numeric vector cut points bin questions (numeric). typical Likert. x_bin_labels Optional character vector labels x_breaks. x_map_values Optional named list rename question values. stack_breaks Optional numeric vector cut points bin responses. stack_bin_labels Optional character vector labels stack_breaks. stack_map_values Optional named list rename response values. show_question_tooltip Logical. TRUE, shows custom tooltip question labels.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacked Bar Charts — create_stackedbars","text":"highcharter stacked bar chart object.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_stackedbars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked Bar Charts — create_stackedbars","text":"","code":"# Load GSS data data(gss_all) #> Warning: data set ‘gss_all’ not found  # Filter to recent years and select Likert-style questions gss_recent <- gss_all %>%   filter(year >= 2010) %>%   select(year, confinan, confed, conmedic, conjudge, consci, conlegis) #> Error in select(., year, confinan, confed, conmedic, conjudge, consci,     conlegis): could not find function \"select\"  # Example 1: Basic Likert chart - Confidence in institutions confidence_questions <- c(\"confinan\", \"confed\", \"conmedic\", \"conjudge\", \"consci\", \"conlegis\") confidence_labels <- c(   \"Financial Institutions\",   \"Education\",   \"Medicine\",   \"Courts/Justice\",   \"Scientific Community\",   \"Congress\" )  # Define response order (typical GSS confidence scale) confidence_order <- c(\"A Great Deal\", \"Only Some\", \"Hardly Any\")  plot1 <- create_stackedbars(   data = gss_recent,   questions = confidence_questions,   question_labels = confidence_labels,   title = \"Confidence in American Institutions\",   subtitle = \"GSS respondents 2010-present\",   x_label = \"Institution\",   stack_label = \"Level of Confidence\",   response_levels = confidence_order,   stacked_type = \"percent\",   color_palette = c(\"#2E8B57\", \"#FFD700\", \"#CD5C5C\") ) #> Error: object 'gss_recent' not found plot1 #> Error: object 'plot1' not found  # Example 2: Including NA values with custom labels plot2 <- create_stackedbars(   data = gss_recent,   questions = confidence_questions,   question_labels = confidence_labels,   title = \"Confidence in Institutions (Including Non-Responses)\",   subtitle = \"Showing missing data explicitly\",   x_label = \"Institution\",   stack_label = \"Response\",   include_na = TRUE,   na_label_stack = \"No Opinion/Refused\",   stacked_type = \"percent\",   tooltip_suffix = \"%\",   color_palette = c(\"#2E8B57\", \"#FFD700\", \"#CD5C5C\", \"#808080\") ) #> Error: object 'gss_recent' not found plot2 #> Error: object 'plot2' not found  # Example 3: Custom response mapping and ordering # Map GSS codes to more descriptive labels confidence_map <- list(   \"A Great Deal\" = \"High Confidence\",   \"Only Some\" = \"Moderate Confidence\",   \"Hardly Any\" = \"Low Confidence\" )  plot3 <- create_stackedbars(   data = gss_recent,   questions = confidence_questions[1:4],  # Just first 4 institutions   question_labels = confidence_labels[1:4],   title = \"Institutional Confidence with Custom Labels\",   subtitle = \"Remapped response categories\",   stack_map_values = confidence_map,   stack_order = c(\"High Confidence\", \"Moderate Confidence\", \"Low Confidence\"),   stacked_type = \"normal\",   color_palette = c(\"#1f77b4\", \"#ff7f0e\", \"#d62728\") ) #> Error: object 'gss_recent' not found plot3 #> Error: object 'plot3' not found  # Example 4: Custom question ordering and tooltips # Reorder questions by typical confidence levels (highest to lowest) custom_question_order <- c(   \"Scientific Community\",   \"Medicine\",   \"Education\",   \"Courts/Justice\",   \"Financial Institutions\",   \"Congress\" )  plot4 <- create_stackedbars(   data = gss_recent,   questions = confidence_questions,   question_labels = confidence_labels,   title = \"Institutional Confidence (Reordered)\",   subtitle = \"Ordered from typically highest to lowest confidence\",   x_order = custom_question_order,   response_levels = confidence_order,   stacked_type = \"percent\",   tooltip_prefix = \"Response: \",   tooltip_suffix = \"% of respondents\",   x_tooltip_suffix = \" institution\",   color_palette = c(\"#2E8B57\", \"#FFD700\", \"#CD5C5C\") ) #> Error: object 'gss_recent' not found plot4 #> Error: object 'plot4' not found  # Example 5: Working with different Likert scales # Using happiness and life satisfaction questions if available if (all(c(\"happy\", \"satfin\", \"satjob\") %in% names(gss_all))) {   satisfaction_data <- gss_all %>%     filter(year >= 2010) %>%     select(happy, satfin, satjob) %>%     # Convert to consistent scale for demonstration     mutate(across(everything(), as.character))    satisfaction_questions <- c(\"happy\", \"satfin\", \"satjob\")   satisfaction_labels <- c(\"General Happiness\", \"Financial Satisfaction\", \"Job Satisfaction\")    plot5 <- create_stackedbars(     data = satisfaction_data,     questions = satisfaction_questions,     question_labels = satisfaction_labels,     title = \"Life Satisfaction Measures\",     subtitle = \"Multiple satisfaction domains\",     x_label = \"Life Domain\",     stack_label = \"Satisfaction Level\",     stacked_type = \"percent\",     include_na = TRUE,     na_label_stack = \"Not Asked/No Answer\"   )   plot5 } #> Error: object 'gss_all' not found"},{"path":"https://favstats.github.io/dashboardr/reference/create_timeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Timeline Chart — create_timeline","title":"Create a Timeline Chart — create_timeline","text":"Creates interactive timeline visualizations showing changes survey responses time. Supports multiple chart types including stacked areas, line charts, diverging bar charts.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_timeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Timeline Chart — create_timeline","text":"","code":"create_timeline(   data,   time_var,   response_var,   group_var = NULL,   chart_type = \"stacked_area\",   title = NULL,   y_max = NULL,   response_levels = NULL,   time_breaks = NULL,   time_bin_labels = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/create_timeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Timeline Chart — create_timeline","text":"data data frame containing survey data time response variables. time_var Character string. Name time variable (e.g., \"year\", \"wave\"). response_var Character string. Name response variable containing Likert responses. group_var Optional character string. Name grouping variable separate series (e.g., \"gender\", \"education\"). Creates separate lines/areas group. chart_type Character string. Type chart: \"stacked_area\" \"line\". title Optional main title chart. y_max Optional numeric value. Maximum value Y-axis. response_levels Optional character vector specifying order response categories. time_breaks Optional numeric vector binning continuous time variables. time_bin_labels Optional character vector labels time bins.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_timeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Timeline Chart — create_timeline","text":"highcharter plot object.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_timeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Timeline Chart — create_timeline","text":"","code":"# Load GSS data data(gss_all) #> Warning: data set ‘gss_all’ not found  # Basic timeline - confidence in institutions over time plot1 <- create_timeline_(            data = gss_all,            time_var = \"year\",            response_var = \"confinan\",            title = \"Confidence in Financial Institutions Over Time\",            y_max = 100            ) #> Error in create_timeline_(data = gss_all, time_var = \"year\", response_var = \"confinan\",     title = \"Confidence in Financial Institutions Over Time\",     y_max = 100): could not find function \"create_timeline_\" plot1 #> Error: object 'plot1' not found  # Line chart by gender plot2 <- create_timeline_fixed(    data = gss_all,    time_var = \"year\",    response_var = \"happy\",    group_var = \"sex\",    chart_type = \"line\",    title = \"Happiness Trends by Gender\",    response_levels = c(\"very happy\", \"pretty happy\", \"not too happy\") ) #> Error in create_timeline_fixed(data = gss_all, time_var = \"year\", response_var = \"happy\",     group_var = \"sex\", chart_type = \"line\", title = \"Happiness Trends by Gender\",     response_levels = c(\"very happy\", \"pretty happy\", \"not too happy\")): could not find function \"create_timeline_fixed\" plot2 #> Error: object 'plot2' not found"},{"path":"https://favstats.github.io/dashboardr/reference/create_viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new visualization collection — create_viz","title":"Create a new visualization collection — create_viz","text":"Initializes empty collection building multiple visualizations using piping workflow. Optionally accepts custom display labels tab groups.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new visualization collection — create_viz","text":"","code":"create_viz(tabgroup_labels = NULL)"},{"path":"https://favstats.github.io/dashboardr/reference/create_viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new visualization collection — create_viz","text":"tabgroup_labels Named vector/list mapping tabgroup IDs display names","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new visualization collection — create_viz","text":"viz_collection object","code":""},{"path":"https://favstats.github.io/dashboardr/reference/create_viz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new visualization collection — create_viz","text":"","code":"if (FALSE) { # \\dontrun{ # Create viz collection with custom group labels vizzes <- create_viz(tabgroup_labels = c(\"demo\" = \"Demographics\",                                           \"pol\" = \"Political Views\")) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/dot-check_for_icons.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if any icons are used in the dashboard — .check_for_icons","title":"Check if any icons are used in the dashboard — .check_for_icons","text":"Internal function detect iconify shortcodes present dashboard content.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-check_for_icons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if any icons are used in the dashboard — .check_for_icons","text":"","code":".check_for_icons(proj)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-check_for_icons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if any icons are used in the dashboard — .check_for_icons","text":"proj dashboard_project object","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-check_for_icons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if any icons are used in the dashboard — .check_for_icons","text":"Logical indicating icons present","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_global_setup_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate global setup chunk for QMD files — .generate_global_setup_chunk","title":"Generate global setup chunk for QMD files — .generate_global_setup_chunk","text":"Creates comprehensive setup chunk includes libraries, data loading, global settings avoid repetition individual visualizations.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_global_setup_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate global setup chunk for QMD files — .generate_global_setup_chunk","text":"","code":".generate_global_setup_chunk(page)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_global_setup_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate global setup chunk for QMD files — .generate_global_setup_chunk","text":"page Page object containing data_path visualizations","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_global_setup_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate global setup chunk for QMD files — .generate_global_setup_chunk","text":"Character vector setup chunk lines","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_quarto_yml.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate _quarto.yml configuration file — .generate_quarto_yml","title":"Generate _quarto.yml configuration file — .generate_quarto_yml","text":"Internal function generates complete Quarto website configuration file based dashboard project settings. Handles Quarto website features including navigation, styling, analytics, deployment options.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_quarto_yml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate _quarto.yml configuration file — .generate_quarto_yml","text":"","code":".generate_quarto_yml(proj)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_quarto_yml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate _quarto.yml configuration file — .generate_quarto_yml","text":"proj dashboard_project object containing configuration settings","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_quarto_yml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate _quarto.yml configuration file — .generate_quarto_yml","text":"Character vector YAML lines _quarto.yml file","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_quarto_yml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate _quarto.yml configuration file — .generate_quarto_yml","text":"function generates comprehensive Quarto configuration including: Project type output directory Website title, favicon, branding Navbar social media links search Sidebar auto-generated navigation Format settings (theme, CSS, math, code features) Analytics (Google Analytics, Plausible, GTag) Deployment settings (GitHub Pages, Netlify) Iconify filter icon support","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_typed_viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate R code for typed visualizations — .generate_typed_viz","title":"Generate R code for typed visualizations — .generate_typed_viz","text":"Internal function generates R code specific visualization types (stackedbar, heatmap, histogram, timeline) mapping type names function names serializing parameters.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_typed_viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate R code for typed visualizations — .generate_typed_viz","text":"","code":".generate_typed_viz(spec)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_typed_viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate R code for typed visualizations — .generate_typed_viz","text":"spec Visualization specification list containing type parameters","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_typed_viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate R code for typed visualizations — .generate_typed_viz","text":"Character vector R code lines visualization","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-generate_typed_viz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate R code for typed visualizations — .generate_typed_viz","text":"function: Maps visualization types function names (e.g., \"stackedbar\" → \"create_stackedbar\") Excludes internal parameters (type, data_path, tabgroup, text, icon, text_position) Serializes parameters using .serialize_arg() Formats function call proper indentation","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-install_iconify_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Install iconify extension automatically — .install_iconify_extension","title":"Install iconify extension automatically — .install_iconify_extension","text":"Downloads installs official iconify extension project directory icons detected dashboard.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-install_iconify_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install iconify extension automatically — .install_iconify_extension","text":"","code":".install_iconify_extension(output_dir)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-install_iconify_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install iconify extension automatically — .install_iconify_extension","text":"output_dir dashboard output directory","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-install_iconify_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install iconify extension automatically — .install_iconify_extension","text":"Logical indicating installation successful","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-process_visualizations.html","id":null,"dir":"Reference","previous_headings":"","what":"Process visualizations into organized specs with tab groups — .process_visualizations","title":"Process visualizations into organized specs with tab groups — .process_visualizations","text":"Unified internal function handles viz_collection plain list inputs, organizing visualizations standalone items tab groups based tabgroup parameter.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-process_visualizations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process visualizations into organized specs with tab groups — .process_visualizations","text":"","code":".process_visualizations(viz_input, data_path, tabgroup_labels = NULL)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-process_visualizations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process visualizations into organized specs with tab groups — .process_visualizations","text":"viz_input Either viz_collection object plain list visualization specs data_path Path data file page (attached viz) tabgroup_labels Optional named list/vector custom display labels tab groups","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-process_visualizations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process visualizations into organized specs with tab groups — .process_visualizations","text":"List processed visualization specs, standalone visualizations first, followed tab group objects","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-process_visualizations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process visualizations into organized specs with tab groups — .process_visualizations","text":"function handles viz_collection objects plain lists visualization specifications. : Attaches data_path visualization Groups visualizations tabgroup parameter Converts single-item groups standalone visualizations group titles Creates tab group objects multi-item groups Applies custom tab group labels provided","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-serialize_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R objects to proper R code strings for generating .qmd files — .serialize_arg","title":"Convert R objects to proper R code strings for generating .qmd files — .serialize_arg","text":"Internal function converts R objects properly formatted R code strings inclusion generated Quarto markdown files. Handles various data types preserves special cases like data references.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-serialize_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R objects to proper R code strings for generating .qmd files — .serialize_arg","text":"","code":".serialize_arg(arg, arg_name = NULL)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-serialize_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R objects to proper R code strings for generating .qmd files — .serialize_arg","text":"arg R object serialize arg_name Optional name argument (debugging)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-serialize_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R objects to proper R code strings for generating .qmd files — .serialize_arg","text":"Character string containing properly formatted R code","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-serialize_arg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert R objects to proper R code strings for generating .qmd files — .serialize_arg","text":"function handles: NULL values → \"NULL\" Character strings → quoted strings escaped quotes Numeric values → unquoted numbers Logical values → \"TRUE\"/\"FALSE\" Named lists → \"list(name1 = value1, name2 = value2)\" Unnamed lists → \"list(value1, value2)\" Special identifiers like \"data\" → unquoted Complex objects → deparsed representation","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-show_dashboard_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Show beautiful dashboard summary — .show_dashboard_summary","title":"Show beautiful dashboard summary — .show_dashboard_summary","text":"Internal function displays comprehensive summary generated dashboard files provides helpful guidance users.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-show_dashboard_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show beautiful dashboard summary — .show_dashboard_summary","text":"","code":".show_dashboard_summary(proj, output_dir)"},{"path":"https://favstats.github.io/dashboardr/reference/dot-show_dashboard_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show beautiful dashboard summary — .show_dashboard_summary","text":"proj dashboard_project object output_dir Path output directory","code":""},{"path":"https://favstats.github.io/dashboardr/reference/dot-show_dashboard_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show beautiful dashboard summary — .show_dashboard_summary","text":"Invisible NULL","code":""},{"path":"https://favstats.github.io/dashboardr/reference/generate_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all dashboard files — generate_dashboard","title":"Generate all dashboard files — generate_dashboard","text":"Writes .qmd files, _quarto.yml, optionally renders dashboard HTML using Quarto.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/generate_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all dashboard files — generate_dashboard","text":"","code":"generate_dashboard(proj, render = TRUE, open = \"browser\")"},{"path":"https://favstats.github.io/dashboardr/reference/generate_dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all dashboard files — generate_dashboard","text":"proj dashboard_project object render Whether render HTML (requires Quarto CLI) open open result: \"browser\", \"viewer\", FALSE","code":""},{"path":"https://favstats.github.io/dashboardr/reference/generate_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate all dashboard files — generate_dashboard","text":"Invisibly returns project object","code":""},{"path":"https://favstats.github.io/dashboardr/reference/generate_dashboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate all dashboard files — generate_dashboard","text":"","code":"if (FALSE) { # \\dontrun{ dashboard %>% generate_dashboard(render = TRUE, open = \"browser\") } # }"},{"path":"https://favstats.github.io/dashboardr/reference/icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create iconify icon shortcode — icon","title":"Create iconify icon shortcode — icon","text":"Helper function generate iconify icon shortcodes use pages visualizations.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create iconify icon shortcode — icon","text":"","code":"icon(icon_name)"},{"path":"https://favstats.github.io/dashboardr/reference/icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create iconify icon shortcode — icon","text":"icon_name Icon name format \"collection:name\" (e.g., \"ph:users-three\")","code":""},{"path":"https://favstats.github.io/dashboardr/reference/icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create iconify icon shortcode — icon","text":"Iconify shortcode string","code":""},{"path":"https://favstats.github.io/dashboardr/reference/icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create iconify icon shortcode — icon","text":"","code":"if (FALSE) { # \\dontrun{ icon(\"ph:users-three\")  # Returns iconify shortcode icon(\"emojione:flag-for-united-states\")  # Returns iconify shortcode } # }"},{"path":"https://favstats.github.io/dashboardr/reference/md_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multi-line markdown text content — md_text","title":"Create multi-line markdown text content — md_text","text":"Helper function create readable multi-line markdown text content pages. Automatically handles line breaks formatting better readability.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/md_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multi-line markdown text content — md_text","text":"","code":"md_text(...)"},{"path":"https://favstats.github.io/dashboardr/reference/md_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multi-line markdown text content — md_text","text":"... Text content separate arguments character vectors","code":""},{"path":"https://favstats.github.io/dashboardr/reference/md_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multi-line markdown text content — md_text","text":"Single character string proper line breaks","code":""},{"path":"https://favstats.github.io/dashboardr/reference/md_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create multi-line markdown text content — md_text","text":"","code":"if (FALSE) { # \\dontrun{ # Method 1: Separate arguments text_content <- md_text(   \"# Welcome\",   \"\",   \"This is a multi-line text block.\",   \"\",   \"## Features\",   \"- Feature 1\",   \"- Feature 2\" )  # Method 2: Character vectors lines <- c(\"# About\", \"\", \"This is about our study.\") text_content <- md_text(lines)  # Use in add_page add_page(\"About\", text = text_content) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/navbar_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a navbar section for hybrid navigation — navbar_section","title":"Create a navbar section for hybrid navigation — navbar_section","text":"Helper function create navbar section links sidebar group hybrid navigation. creates dropdown-style navigation.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/navbar_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a navbar section for hybrid navigation — navbar_section","text":"","code":"navbar_section(text, sidebar_id, icon = NULL)"},{"path":"https://favstats.github.io/dashboardr/reference/navbar_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a navbar section for hybrid navigation — navbar_section","text":"text Display text navbar item sidebar_id ID sidebar group link icon Optional icon navbar item","code":""},{"path":"https://favstats.github.io/dashboardr/reference/navbar_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a navbar section for hybrid navigation — navbar_section","text":"List containing navbar section configuration","code":""},{"path":"https://favstats.github.io/dashboardr/reference/navbar_section.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a navbar section for hybrid navigation — navbar_section","text":"","code":"if (FALSE) { # \\dontrun{ # Create navbar sections that link to sidebar groups analysis_section <- navbar_section(\"Analysis\", \"analysis\", \"ph:chart-bar\") reference_section <- navbar_section(\"Reference\", \"reference\", \"ph:book\") } # }"},{"path":"https://favstats.github.io/dashboardr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://favstats.github.io/dashboardr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://favstats.github.io/dashboardr/reference/print.dashboard_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for dashboard projects — print.dashboard_project","title":"Print method for dashboard projects — print.dashboard_project","text":"Displays concise summary dashboard structure instead raw list internals.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/print.dashboard_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for dashboard projects — print.dashboard_project","text":"","code":"# S3 method for class 'dashboard_project' print(x, ...)"},{"path":"https://favstats.github.io/dashboardr/reference/print.dashboard_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for dashboard projects — print.dashboard_project","text":"x dashboard_project object ... Additional arguments (ignored)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/print.viz_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for visualization collections — print.viz_collection","title":"Print method for visualization collections — print.viz_collection","text":"Displays summary visualizations collection grouped tabgroup.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/print.viz_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for visualization collections — print.viz_collection","text":"","code":"# S3 method for class 'viz_collection' print(x, ...)"},{"path":"https://favstats.github.io/dashboardr/reference/print.viz_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for visualization collections — print.viz_collection","text":"x viz_collection object ... Additional arguments (ignored)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/publish_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish dashboard to GitHub Pages or GitLab Pages — publish_dashboard","title":"Publish dashboard to GitHub Pages or GitLab Pages — publish_dashboard","text":"function automates process publishing dashboard GitHub Pages GitLab Pages. handles git initialization, remote setup, deployment configuration. function automates process publishing dashboard GitHub Pages GitLab Pages. handles git initialization, remote setup, deployment configuration.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/publish_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish dashboard to GitHub Pages or GitLab Pages — publish_dashboard","text":"","code":"publish_dashboard(   dashboard_path,   platform = c(\"github\", \"gitlab\"),   repo_name = NULL,   username = NULL,   private = FALSE,   open_browser = FALSE,   commit_message = \"Deploy dashboard\",   branch = \"main\",   docs_subdir = \"docs\",   include_data = FALSE )  publish_dashboard(   dashboard_path,   platform = c(\"github\", \"gitlab\"),   repo_name = NULL,   username = NULL,   private = FALSE,   open_browser = FALSE,   commit_message = \"Deploy dashboard\",   branch = \"main\",   docs_subdir = \"docs\",   include_data = FALSE )"},{"path":"https://favstats.github.io/dashboardr/reference/publish_dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish dashboard to GitHub Pages or GitLab Pages — publish_dashboard","text":"dashboard_path Path generated dashboard directory platform Platform publish : \"github\" \"gitlab\" repo_name Name repository (defaults dashboard directory name) username GitHub/GitLab username (optional, prompt provided) private Whether create private repository (default: FALSE) open_browser Whether open published dashboard browser (default: TRUE) commit_message Git commit message (default: \"Deploy dashboard\") branch Branch deploy (default: \"main\") docs_subdir Subdirectory containing docs (default: \"docs\") include_data Whether include data files repository (default: FALSE)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/publish_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publish dashboard to GitHub Pages or GitLab Pages — publish_dashboard","text":"Invisibly returns repository URL Invisibly returns repository URL","code":""},{"path":"https://favstats.github.io/dashboardr/reference/publish_dashboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish dashboard to GitHub Pages or GitLab Pages — publish_dashboard","text":"","code":"if (FALSE) { # \\dontrun{ # After generating a dashboard dashboard <- create_dashboard(\"my_dashboard\") %>%   add_page(\"Analysis\", data = my_data, visualizations = my_viz) %>%   generate_dashboard()  # Publish to GitHub Pages publish_dashboard(\"my_dashboard\", platform = \"github\", username = \"myusername\")  # Publish to GitLab Pages publish_dashboard(\"my_dashboard\", platform = \"gitlab\", username = \"myusername\") } # } if (FALSE) { # \\dontrun{ # After generating a dashboard dashboard <- create_dashboard(\"my_dashboard\") %>%   add_page(\"Analysis\", data = my_data, visualizations = my_viz) %>%   generate_dashboard()  # Publish to GitHub Pages publish_dashboard(\"my_dashboard\", platform = \"github\", username = \"myusername\")  # Publish to GitLab Pages publish_dashboard(\"my_dashboard\", platform = \"gitlab\", username = \"myusername\") } # }"},{"path":"https://favstats.github.io/dashboardr/reference/set_tabgroup_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or update tabgroup display labels — set_tabgroup_labels","title":"Set or update tabgroup display labels — set_tabgroup_labels","text":"Updates display labels tab groups visualization collection. Useful want change section headers creating collection.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/set_tabgroup_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or update tabgroup display labels — set_tabgroup_labels","text":"","code":"set_tabgroup_labels(viz_collection, labels)"},{"path":"https://favstats.github.io/dashboardr/reference/set_tabgroup_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or update tabgroup display labels — set_tabgroup_labels","text":"viz_collection viz_collection object labels Named character vector list mapping tabgroup IDs labels","code":""},{"path":"https://favstats.github.io/dashboardr/reference/set_tabgroup_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or update tabgroup display labels — set_tabgroup_labels","text":"updated viz_collection","code":""},{"path":"https://favstats.github.io/dashboardr/reference/set_tabgroup_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or update tabgroup display labels — set_tabgroup_labels","text":"","code":"if (FALSE) { # \\dontrun{ vizzes <- create_viz() %>%   add_viz(type = \"heatmap\", tabgroup = \"demo\") %>%   set_tabgroup_labels(c(\"demo\" = \"Demographic Breakdowns\")) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/sidebar_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sidebar group for hybrid navigation — sidebar_group","title":"Create a sidebar group for hybrid navigation — sidebar_group","text":"Helper function create sidebar group configuration use hybrid navigation. group can styling contains list pages.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/sidebar_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sidebar group for hybrid navigation — sidebar_group","text":"","code":"sidebar_group(   id,   title,   pages,   style = NULL,   background = NULL,   foreground = NULL,   border = NULL,   alignment = NULL,   collapse_level = NULL,   pinned = NULL,   tools = NULL )"},{"path":"https://favstats.github.io/dashboardr/reference/sidebar_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sidebar group for hybrid navigation — sidebar_group","text":"id Unique identifier sidebar group title Display title sidebar group pages Character vector page names include group style Sidebar style (docked, floating, etc.) (optional) background Background color (optional) foreground Foreground color (optional) border Show border (optional) alignment Alignment (left, right) (optional) collapse_level Collapse level navigation (optional) pinned Whether sidebar pinned (optional) tools List tools add sidebar (optional)","code":""},{"path":"https://favstats.github.io/dashboardr/reference/sidebar_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sidebar group for hybrid navigation — sidebar_group","text":"List containing sidebar group configuration","code":""},{"path":"https://favstats.github.io/dashboardr/reference/sidebar_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sidebar group for hybrid navigation — sidebar_group","text":"","code":"if (FALSE) { # \\dontrun{ # Create a sidebar group for analysis pages analysis_group <- sidebar_group(   id = \"analysis\",   title = \"Data Analysis\",   pages = c(\"overview\", \"demographics\", \"findings\"),   style = \"docked\",   background = \"light\" ) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/spec_viz.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a single visualization specification — spec_viz","title":"Create a single visualization specification — spec_viz","text":"Helper function create individual viz specs can combined list used directly add_page().","code":""},{"path":"https://favstats.github.io/dashboardr/reference/spec_viz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a single visualization specification — spec_viz","text":"","code":"spec_viz(type, ..., tabgroup = NULL, title = NULL)"},{"path":"https://favstats.github.io/dashboardr/reference/spec_viz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a single visualization specification — spec_viz","text":"type Visualization type ... Additional parameters tabgroup Optional group ID title Display title","code":""},{"path":"https://favstats.github.io/dashboardr/reference/spec_viz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a single visualization specification — spec_viz","text":"list containing visualization specification","code":""},{"path":"https://favstats.github.io/dashboardr/reference/spec_viz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a single visualization specification — spec_viz","text":"","code":"if (FALSE) { # \\dontrun{ viz1 <- spec_viz(type = \"heatmap\", x_var = \"party\", y_var = \"ideology\") viz2 <- spec_viz(type = \"histogram\", x_var = \"age\") page_viz <- list(viz1, viz2) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/text_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Create text content from a character vector — text_lines","title":"Create text content from a character vector — text_lines","text":"Alternative helper creating text content existing character vectors.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/text_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create text content from a character vector — text_lines","text":"","code":"text_lines(lines)"},{"path":"https://favstats.github.io/dashboardr/reference/text_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create text content from a character vector — text_lines","text":"lines Character vector text lines","code":""},{"path":"https://favstats.github.io/dashboardr/reference/text_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create text content from a character vector — text_lines","text":"Single character string proper line breaks","code":""},{"path":"https://favstats.github.io/dashboardr/reference/text_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create text content from a character vector — text_lines","text":"","code":"if (FALSE) { # \\dontrun{ lines <- c(\"# Title\", \"\", \"Content here\") text_content <- text_lines(lines) add_page(\"Page\", text = text_content) } # }"},{"path":"https://favstats.github.io/dashboardr/reference/tutorial_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a tutorial dashboard. — tutorial_dashboard","title":"Generate a tutorial dashboard. — tutorial_dashboard","text":"function creates renders detailed tutorial dashboard showcasing various features dashboardr package. includes examples stacked bar charts, heatmaps, multiple pages, custom components.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/tutorial_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a tutorial dashboard. — tutorial_dashboard","text":"","code":"tutorial_dashboard()"},{"path":"https://favstats.github.io/dashboardr/reference/tutorial_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a tutorial dashboard. — tutorial_dashboard","text":"Invisibly returns dashboard_project object.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/tutorial_dashboard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a tutorial dashboard. — tutorial_dashboard","text":"dashboard uses data General Social Survey (GSS) demonstrate visualization layout options.","code":""},{"path":"https://favstats.github.io/dashboardr/reference/tutorial_dashboard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a tutorial dashboard. — tutorial_dashboard","text":"","code":"if (FALSE) { # \\dontrun{ # Run the tutorial dashboard (requires Quarto CLI and 'gssr' package) tutorial_dashboard() } # }"}]
