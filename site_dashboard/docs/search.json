[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Demo Dashboard Site",
    "section": "",
    "text": "Welcome\nThis is the landing page."
  },
  {
    "objectID": "dashboard.html",
    "href": "dashboard.html",
    "title": "Welcome to Dashboardr!",
    "section": "",
    "text": "Dashboardr enables you to visualize data in a clean and straightforward way. It makes it easy to create beautiful dashboards, especially when you have little experience with R. To learn more about Dashboardr, check out our GitHub.\nThis is a tutorial template showing you how to use your data with dashboardr functions. Edit the code below with your actual column names to create your own visualizations."
  },
  {
    "objectID": "dashboard.html#stacked-bar-chart",
    "href": "dashboard.html#stacked-bar-chart",
    "title": "Welcome to Dashboardr!",
    "section": "Stacked Bar Chart",
    "text": "Stacked Bar Chart\nüëÜ Edit the code below: Replace \"your_x_variable\" and \"your_stack_variable\" with actual column names from your data.\n\n# EDIT THIS CODE WITH YOUR COLUMN NAMES:\ncreate_stackedbar(\n  data = data,\n  x_var = \"your_x_variable\",      # ‚Üê Replace with your X-axis column\n  stack_var = \"your_stack_variable\", # ‚Üê Replace with your grouping column\n  title = \"Your Chart Title\",\n  subtitle = \"Your subtitle here\",\n  stacked_type = \"normal\"  # or \"percent\" for proportions\n)"
  },
  {
    "objectID": "dashboard.html#educational-attainment-by-gender-if-using-gss-data",
    "href": "dashboard.html#educational-attainment-by-gender-if-using-gss-data",
    "title": "Welcome to Dashboardr!",
    "section": "Educational Attainment by Gender (if using GSS data)",
    "text": "Educational Attainment by Gender (if using GSS data)\n\n# This example works if your data has these GSS columns\nif (all(c(\"class_1a\", \"sex_1a\") %in% names(data))) {\n  \n  # Create mappings for cleaner display\n  sex_map &lt;- list(\"Male\" = \"Men\", \"Female\" = \"Women\")\n  class_map &lt;- list(\n    \"Lower Class\" = \"Lower\",\n    \"Working Class\" = \"Working\", \n    \"Middle Class\" = \"Middle\",\n    \"Upper Class\" = \"Upper\"\n  )\n  \n  # Create chart with custom mappings\n  plot1 &lt;- create_stackedbar(\n    data = data,\n    x_var = \"class_1a\",\n    stack_var = \"sex_1a\",\n    title = \"Gender Distribution Across Social Classes\",\n    subtitle = \"With custom labels and ordering\",\n    x_label = \"Self-Reported Social Class\",\n    stack_label = \"Gender\",\n    x_map_values = class_map,\n    stack_map_values = sex_map,\n    x_order = c(\"Lower\", \"Working\", \"Middle\", \"Upper\"),\n    stack_order = c(\"Women\", \"Men\"),\n    stacked_type = \"normal\",\n    tooltip_prefix = \"Count: \",\n    color_palette = c(\"#E07A5F\", \"#3D5A80\")\n  )\n  \n  plot1\n  \n} else {\n  cat(\"üìù GSS columns not found. Use the template above with your column names!\\n\")\n  cat(\"Available columns:\", paste(names(data)[1:min(10, ncol(data))], collapse = \", \"))\n  if (ncol(data) &gt; 10) cat(\"... and\", ncol(data) - 10, \"more\")\n}\n\nNote: Column 'class_1a' was 'haven_labelled' and converted to factor (levels = values).\n\n\nNote: Column 'sex_1a' was 'haven_labelled' and converted to factor (levels = values).\n\n\nWarning: x_order provided with x_map_values. Ensure x_order refers to the *new*\nmapped labels.\n\n\nWarning: stack_order provided with stack_map_values. Ensure stack_order refers\nto the *new* mapped labels."
  },
  {
    "objectID": "dashboard.html#multiple-stacked-bars",
    "href": "dashboard.html#multiple-stacked-bars",
    "title": "Welcome to Dashboardr!",
    "section": "Multiple Stacked Bars",
    "text": "Multiple Stacked Bars\n\n# EDIT THIS CODE WITH YOUR COLUMN NAMES:\ncreate_stackedbars(\n  data = data,\n  x_var = \"your_x_variable\",      # ‚Üê Replace with your X-axis column\n  stack_var = \"your_stack_variable\", # ‚Üê Replace with your grouping column\n  title = \"Your Chart Title\",\n  subtitle = \"Your subtitle here\",\n  stacked_type = \"normal\"  # or \"percent\" for proportions\n)"
  },
  {
    "objectID": "dashboard.html#social-attitudes-and-trust-if-using-gss-data",
    "href": "dashboard.html#social-attitudes-and-trust-if-using-gss-data",
    "title": "Welcome to Dashboardr!",
    "section": "Social Attitudes and Trust (if using GSS data)",
    "text": "Social Attitudes and Trust (if using GSS data)\n\nif (all(c(\"trust_1a\", \"fair_1a\", \"helpful_1a\") %in% names(data))) {\n  \n  # Define our questions and labels\n  social_questions &lt;- c(\"trust_1a\", \"fair_1a\", \"helpful_1a\")\n  social_labels &lt;- c(\n    \"Interpersonal Trust\",\n    \"Fairness of Others\", \n    \"Helpfulness of Others\"\n  )\n  \n  # Create basic multi-question chart\n  plot2 &lt;- create_stackedbars(\n    data = data,\n    questions = social_questions,\n    question_labels = social_labels,\n    title = \"Social Attitudes and Trust\",\n    subtitle = \"GSS Panel 2016 - Distribution of responses across social attitude questions\",\n    x_label = \"Social Attitude Dimension\",\n    stack_label = \"Response Level\",\n    stacked_type = \"normal\"\n  )\n  \n  plot2\n\n} else {\n  cat(\"üìù GSS columns not found. Use the template above with your column names!\\n\")\n  cat(\"Available columns:\", paste(names(data)[1:min(10, ncol(data))], collapse = \", \"))\n  if (ncol(data) &gt; 10) cat(\"... and\", ncol(data) - 10, \"more\")\n}\n\nWarning: `trust_1a` and `fair_1a` have conflicting value labels.\n‚Ñπ Labels for these values will be taken from `trust_1a`.\n‚úñ Values: 1 and 2\n\n\nWarning: `trust_1a` and `helpful_1a` have conflicting value labels.\n‚Ñπ Labels for these values will be taken from `trust_1a`.\n‚úñ Values: 1 and 2\n\n\nNote: Column 'response' was 'haven_labelled' and converted to factor (levels = values)."
  },
  {
    "objectID": "dashboard.html#step-1-choose-your-variables",
    "href": "dashboard.html#step-1-choose-your-variables",
    "title": "Welcome to Dashboardr!",
    "section": "Step 1: Choose Your Variables",
    "text": "Step 1: Choose Your Variables\nLook at the ‚ÄúColumn Information‚Äù table above to identify: - Categorical variables for stacked bar charts (factors, characters, or numeric with few unique values) - Variables with reasonable number of categories (ideally &lt; 15 for x-axis, &lt; 10 for stacking)"
  },
  {
    "objectID": "dashboard.html#step-2-edit-the-code",
    "href": "dashboard.html#step-2-edit-the-code",
    "title": "Welcome to Dashboardr!",
    "section": "Step 2: Edit the Code",
    "text": "Step 2: Edit the Code\nReplace the placeholder variable names in the code chunks above with your actual column names."
  },
  {
    "objectID": "dashboard.html#step-3-customize-your-charts",
    "href": "dashboard.html#step-3-customize-your-charts",
    "title": "Welcome to Dashboardr!",
    "section": "Step 3: Customize Your Charts",
    "text": "Step 3: Customize Your Charts\n\nChange stacked_type to \"percent\" for proportional charts\nAdd custom title, subtitle, and labels\nUse stack_order for Likert scales: stack_order = c(\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\")"
  },
  {
    "objectID": "dashboard.html#step-4-add-more-charts",
    "href": "dashboard.html#step-4-add-more-charts",
    "title": "Welcome to Dashboardr!",
    "section": "Step 4: Add More Charts",
    "text": "Step 4: Add More Charts\nCopy the stacked bar code chunk and modify it for different variable combinations.\n\nüí° Pro Tips: - Use stacked_type = \"percent\" when comparing groups of different sizes - Always specify stack_order for ordinal scales (like Likert) - Use x_breaks and x_bin_labels to group continuous variables like age\nüé® Customization: - Add color_palette = c(\"#color1\", \"#color2\", \"#color3\") for custom colors - Use x_map_values = list(\"1\" = \"Male\", \"2\" = \"Female\") to rename coded values"
  }
]