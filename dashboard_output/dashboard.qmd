---
title: "Welcome to Dashboardr!"
format: html
editor: visual
---

```{r setup}
#| include: false
library(dashboardr)
library(highcharter)
library(dplyr)
library(DT)

# Load the user's data
data <- readRDS("dashboard_data.rds")
```

Dashboardr enables you to visualize data in a clean and straightforward way. It makes it easy to create beautiful dashboards, especially when you have little experience with R. To learn more about Dashboardr, check out our [GitHub](https://github.com/favstats/dashboardr).

This is a tutorial template showing you how to use your data with dashboardr functions. **Edit the code below with your actual column names** to create your own visualizations.

# Your Data Overview

```{r data-overview}
# Show basic information about your dataset
cat("Dataset dimensions:", nrow(data), "rows √ó", ncol(data), "columns\n\n")

# Display first few rows
head(data) %>% DT::datatable(options = list(scrollX = TRUE))
```

```{r column-info}
# Show column names and types to help you choose variables
column_summary <- data %>%
  summarise_all(~paste(
    "Type:", class(.)[1], 
    "| Unique values:", length(unique(.)),
    "| Missing:", sum(is.na(.))
  )) %>%
  tidyr::pivot_longer(everything(), names_to = "Column", values_to = "Info")

column_summary %>% DT::datatable(caption = "Your Column Information")
```

# Example Visualizations

## Stacked Bar Chart

**üëÜ Edit the code below:** Replace `"your_x_variable"` and `"your_stack_variable"` with actual column names from your data.

```{r stackedbar}
#| eval: false
#| echo: true

# EDIT THIS CODE WITH YOUR COLUMN NAMES:
create_stackedbar(
  data = data,
  x_var = "your_x_variable",      # ‚Üê Replace with your X-axis column
  stack_var = "your_stack_variable", # ‚Üê Replace with your grouping column
  title = "Your Chart Title",
  subtitle = "Your subtitle here",
  stacked_type = "normal"  # or "percent" for proportions
)
```

## Educational Attainment by Gender (if using GSS data)

```{r stackedbar_gss}
# This example works if your data has these GSS columns
if (all(c("class_1a", "sex_1a") %in% names(data))) {
  
  # Create mappings for cleaner display
  sex_map <- list("Male" = "Men", "Female" = "Women")
  class_map <- list(
    "Lower Class" = "Lower",
    "Working Class" = "Working", 
    "Middle Class" = "Middle",
    "Upper Class" = "Upper"
  )
  
  # Create chart with custom mappings
  plot1 <- create_stackedbar(
    data = data,
    x_var = "class_1a",
    stack_var = "sex_1a",
    title = "Gender Distribution Across Social Classes",
    subtitle = "With custom labels and ordering",
    x_label = "Self-Reported Social Class",
    stack_label = "Gender",
    x_map_values = class_map,
    stack_map_values = sex_map,
    x_order = c("Lower", "Working", "Middle", "Upper"),
    stack_order = c("Women", "Men"),
    stacked_type = "normal",
    tooltip_prefix = "Count: ",
    color_palette = c("#E07A5F", "#3D5A80")
  )
  
  plot1
  
} else {
  cat("üìù GSS columns not found. Use the template above with your column names!\n")
  cat("Available columns:", paste(names(data)[1:min(10, ncol(data))], collapse = ", "))
  if (ncol(data) > 10) cat("... and", ncol(data) - 10, "more")
}
```

## Multiple Stacked Bars

```{r stackedbars}
#| eval: false
#| echo: true

# EDIT THIS CODE WITH YOUR COLUMN NAMES:
create_stackedbars(
  data = data,
  x_var = "your_x_variable",      # ‚Üê Replace with your X-axis column
  stack_var = "your_stack_variable", # ‚Üê Replace with your grouping column
  title = "Your Chart Title",
  subtitle = "Your subtitle here",
  stacked_type = "normal"  # or "percent" for proportions
)
```

## Social Attitudes and Trust (if using GSS data)

```{r stackedbars_gss}
if (all(c("trust_1a", "fair_1a", "helpful_1a") %in% names(data))) {
  
  # Define our questions and labels
  social_questions <- c("trust_1a", "fair_1a", "helpful_1a")
  social_labels <- c(
    "Interpersonal Trust",
    "Fairness of Others", 
    "Helpfulness of Others"
  )
  
  # Create basic multi-question chart
  plot2 <- create_stackedbars(
    data = data,
    questions = social_questions,
    question_labels = social_labels,
    title = "Social Attitudes and Trust",
    subtitle = "GSS Panel 2016 - Distribution of responses across social attitude questions",
    x_label = "Social Attitude Dimension",
    stack_label = "Response Level",
    stacked_type = "normal"
  )
  
  plot2

} else {
  cat("üìù GSS columns not found. Use the template above with your column names!\n")
  cat("Available columns:", paste(names(data)[1:min(10, ncol(data))], collapse = ", "))
  if (ncol(data) > 10) cat("... and", ncol(data) - 10, "more")
}
```

# Quick Start Guide

## Step 1: Choose Your Variables

Look at the "Column Information" table above to identify: - **Categorical variables** for stacked bar charts (factors, characters, or numeric with few unique values) - **Variables with reasonable number of categories** (ideally \< 15 for x-axis, \< 10 for stacking)

## Step 2: Edit the Code

Replace the placeholder variable names in the code chunks above with your actual column names.

## Step 3: Customize Your Charts

-   Change `stacked_type` to `"percent"` for proportional charts
-   Add custom `title`, `subtitle`, and labels
-   Use `stack_order` for Likert scales: `stack_order = c("Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree")`

## Step 4: Add More Charts

Copy the stacked bar code chunk and modify it for different variable combinations.

------------------------------------------------------------------------

**üí° Pro Tips:** - Use `stacked_type = "percent"` when comparing groups of different sizes - Always specify `stack_order` for ordinal scales (like Likert) - Use `x_breaks` and `x_bin_labels` to group continuous variables like age

**üé® Customization:** - Add `color_palette = c("#color1", "#color2", "#color3")` for custom colors - Use `x_map_values = list("1" = "Male", "2" = "Female")` to rename coded values
